
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800100  000023dc  00002470  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000023dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000037f  00800146  00800146  000024b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000024b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000024e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000298  00000000  00000000  00002528  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003529  00000000  00000000  000027c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000133e  00000000  00000000  00005ce9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a1f  00000000  00000000  00007027  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c80  00000000  00000000  00008a48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a2d  00000000  00000000  000096c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002bf7  00000000  00000000  0000a0f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  0000ccec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 2f 05 	jmp	0xa5e	; 0xa5e <__vector_1>
       8:	0c 94 9b 05 	jmp	0xb36	; 0xb36 <__vector_2>
       c:	0c 94 07 06 	jmp	0xc0e	; 0xc0e <__vector_3>
      10:	0c 94 73 06 	jmp	0xce6	; 0xce6 <__vector_4>
      14:	0c 94 df 06 	jmp	0xdbe	; 0xdbe <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 c7 0d 	jmp	0x1b8e	; 0x1b8e <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 75 0d 	jmp	0x1aea	; 0x1aea <__vector_9>
      28:	0c 94 4b 07 	jmp	0xe96	; 0xe96 <__vector_10>
      2c:	0c 94 b7 07 	jmp	0xf6e	; 0xf6e <__vector_11>
      30:	0c 94 23 08 	jmp	0x1046	; 0x1046 <__vector_12>
      34:	0c 94 8f 08 	jmp	0x111e	; 0x111e <__vector_13>
      38:	0c 94 fb 08 	jmp	0x11f6	; 0x11f6 <__vector_14>
      3c:	0c 94 67 09 	jmp	0x12ce	; 0x12ce <__vector_15>
      40:	0c 94 d3 09 	jmp	0x13a6	; 0x13a6 <__vector_16>
      44:	0c 94 3f 0a 	jmp	0x147e	; 0x147e <__vector_17>
      48:	0c 94 ab 0a 	jmp	0x1556	; 0x1556 <__vector_18>
      4c:	0c 94 17 0b 	jmp	0x162e	; 0x162e <__vector_19>
      50:	0c 94 83 0b 	jmp	0x1706	; 0x1706 <__vector_20>
      54:	0c 94 ef 0b 	jmp	0x17de	; 0x17de <__vector_21>
      58:	0c 94 5b 0c 	jmp	0x18b6	; 0x18b6 <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	ec ed       	ldi	r30, 0xDC	; 220
      70:	f3 e2       	ldi	r31, 0x23	; 35
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	a6 34       	cpi	r26, 0x46	; 70
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	a6 e4       	ldi	r26, 0x46	; 70
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	a5 3c       	cpi	r26, 0xC5	; 197
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <main>
      92:	0c 94 ec 11 	jmp	0x23d8	; 0x23d8 <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <writeChar>:
#include "Gui.h"


uint16_t sccMap[] = {0x1551, 0x2080, 0x1e11, 0x1b11, 0x0b50, 0x1b41, 0x1f41, 0x0111, 0x1f51, 0x1b51, 0x0000};

void writeChar(char ch, int pos) {
      9a:	0f 93       	push	r16
      9c:	1f 93       	push	r17
      9e:	cf 93       	push	r28
      a0:	df 93       	push	r29
	uint8_t mask;
	
	uint8_t *writePos = &LCDDR0;
	
	
	if (pos > 5 || pos < 0) {
      a2:	66 30       	cpi	r22, 0x06	; 6
      a4:	71 05       	cpc	r23, r1
      a6:	08 f0       	brcs	.+2      	; 0xaa <writeChar+0x10>
      a8:	4b c0       	rjmp	.+150    	; 0x140 <writeChar+0xa6>
		return;
	}
	
	
	// Convert from char representation to integer
	uint8_t intCh = ch - '0';
      aa:	80 53       	subi	r24, 0x30	; 48
	
	if (intCh > 9 || intCh < 0) {
      ac:	8a 30       	cpi	r24, 0x0A	; 10
      ae:	08 f0       	brcs	.+2      	; 0xb2 <writeChar+0x18>
		intCh = 10;
      b0:	8a e0       	ldi	r24, 0x0A	; 10
	};
	
	// Decide which reg
	writePos += pos >> 1;
      b2:	fb 01       	movw	r30, r22
      b4:	f5 95       	asr	r31
      b6:	e7 95       	ror	r30
      b8:	e4 51       	subi	r30, 0x14	; 20
      ba:	ff 4f       	sbci	r31, 0xFF	; 255
	
	// Decide of upper or lower nibble of reg
	if (pos % 2 == 0) {
      bc:	60 ff       	sbrs	r22, 0
      be:	02 c0       	rjmp	.+4      	; 0xc4 <writeChar+0x2a>
		mask = 0x0f;
	}
	else {
		mask = 0xf0;
      c0:	50 ef       	ldi	r21, 0xF0	; 240
      c2:	01 c0       	rjmp	.+2      	; 0xc6 <writeChar+0x2c>
	// Decide which reg
	writePos += pos >> 1;
	
	// Decide of upper or lower nibble of reg
	if (pos % 2 == 0) {
		mask = 0x0f;
      c4:	5f e0       	ldi	r21, 0x0F	; 15
	}
	else {
		mask = 0xf0;
	}
	
	uint16_t sccChar = sccMap[intCh];
      c6:	a8 2f       	mov	r26, r24
      c8:	b0 e0       	ldi	r27, 0x00	; 0
      ca:	aa 0f       	add	r26, r26
      cc:	bb 1f       	adc	r27, r27
      ce:	a0 50       	subi	r26, 0x00	; 0
      d0:	bf 4f       	sbci	r27, 0xFF	; 255
      d2:	cd 91       	ld	r28, X+
      d4:	dc 91       	ld	r29, X
      d6:	61 e0       	ldi	r22, 0x01	; 1
      d8:	70 e0       	ldi	r23, 0x00	; 0
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
		
		// Reset nibble to write, if i = 0 we do not want to overwrite the middle bits
		if (i == 0) {
			*writePos = (*writePos & ~mask) | (*writePos & 0x66);
			} else {
			*writePos = *writePos & ~mask;
      de:	15 2f       	mov	r17, r21
      e0:	10 95       	com	r17
		// Get relevant nibble
		uint8_t writeCh = (sccChar >> i*4) & 0xf;
		
		// Reset nibble to write, if i = 0 we do not want to overwrite the middle bits
		if (i == 0) {
			*writePos = (*writePos & ~mask) | (*writePos & 0x66);
      e2:	01 2f       	mov	r16, r17
      e4:	06 66       	ori	r16, 0x66	; 102
      e6:	04 c0       	rjmp	.+8      	; 0xf0 <writeChar+0x56>
      e8:	14 96       	adiw	r26, 0x04	; 4
      ea:	35 96       	adiw	r30, 0x05	; 5
      ec:	6f 5f       	subi	r22, 0xFF	; 255
      ee:	7f 4f       	sbci	r23, 0xFF	; 255
	uint16_t sccChar = sccMap[intCh];
	
	// Repeat for all four nibbles
	for (int i = 0; i < 4; i++) {
		// Get relevant nibble
		uint8_t writeCh = (sccChar >> i*4) & 0xf;
      f0:	ce 01       	movw	r24, r28
      f2:	0a 2e       	mov	r0, r26
      f4:	02 c0       	rjmp	.+4      	; 0xfa <writeChar+0x60>
      f6:	96 95       	lsr	r25
      f8:	87 95       	ror	r24
      fa:	0a 94       	dec	r0
      fc:	e2 f7       	brpl	.-8      	; 0xf6 <writeChar+0x5c>
      fe:	48 2f       	mov	r20, r24
     100:	4f 70       	andi	r20, 0x0F	; 15
		
		// Reset nibble to write, if i = 0 we do not want to overwrite the middle bits
		if (i == 0) {
     102:	61 30       	cpi	r22, 0x01	; 1
     104:	71 05       	cpc	r23, r1
     106:	69 f4       	brne	.+26     	; 0x122 <writeChar+0x88>
			*writePos = (*writePos & ~mask) | (*writePos & 0x66);
     108:	80 81       	ld	r24, Z
     10a:	90 2f       	mov	r25, r16
     10c:	98 23       	and	r25, r24
			*writePos = *writePos & ~mask;
		}
		
		
		// Duplicate nibble to upper and mask to write to upper or lower nibble of reg
		*writePos = ((writeCh | (writeCh << 4)) & mask) | *writePos;
     10e:	80 e1       	ldi	r24, 0x10	; 16
     110:	48 9f       	mul	r20, r24
     112:	90 01       	movw	r18, r0
     114:	11 24       	eor	r1, r1
     116:	84 2f       	mov	r24, r20
     118:	82 2b       	or	r24, r18
     11a:	85 23       	and	r24, r21
     11c:	89 2b       	or	r24, r25
     11e:	80 83       	st	Z, r24
     120:	e3 cf       	rjmp	.-58     	; 0xe8 <writeChar+0x4e>
		
		// Reset nibble to write, if i = 0 we do not want to overwrite the middle bits
		if (i == 0) {
			*writePos = (*writePos & ~mask) | (*writePos & 0x66);
			} else {
			*writePos = *writePos & ~mask;
     122:	80 81       	ld	r24, Z
     124:	91 2f       	mov	r25, r17
     126:	98 23       	and	r25, r24
		}
		
		
		// Duplicate nibble to upper and mask to write to upper or lower nibble of reg
		*writePos = ((writeCh | (writeCh << 4)) & mask) | *writePos;
     128:	80 e1       	ldi	r24, 0x10	; 16
     12a:	48 9f       	mul	r20, r24
     12c:	90 01       	movw	r18, r0
     12e:	11 24       	eor	r1, r1
     130:	84 2f       	mov	r24, r20
     132:	82 2b       	or	r24, r18
     134:	85 23       	and	r24, r21
     136:	89 2b       	or	r24, r25
     138:	80 83       	st	Z, r24
	}
	
	uint16_t sccChar = sccMap[intCh];
	
	// Repeat for all four nibbles
	for (int i = 0; i < 4; i++) {
     13a:	64 30       	cpi	r22, 0x04	; 4
     13c:	71 05       	cpc	r23, r1
     13e:	a4 f2       	brlt	.-88     	; 0xe8 <writeChar+0x4e>

	}
	return;
	
	
}
     140:	df 91       	pop	r29
     142:	cf 91       	pop	r28
     144:	1f 91       	pop	r17
     146:	0f 91       	pop	r16
     148:	08 95       	ret

0000014a <printAt>:

void printAt(Gui *self, uint8_t num) {
     14a:	0f 93       	push	r16
     14c:	1f 93       	push	r17
     14e:	cf 93       	push	r28
     150:	df 93       	push	r29
     152:	d6 2f       	mov	r29, r22
    int pp = self->pos;
     154:	fc 01       	movw	r30, r24
     156:	04 81       	ldd	r16, Z+4	; 0x04
     158:	10 e0       	ldi	r17, 0x00	; 0
    writeChar( (num % 100) / 10 + '0', pp);
     15a:	89 e2       	ldi	r24, 0x29	; 41
     15c:	68 9f       	mul	r22, r24
     15e:	81 2d       	mov	r24, r1
     160:	11 24       	eor	r1, r1
     162:	82 95       	swap	r24
     164:	8f 70       	andi	r24, 0x0F	; 15
     166:	26 2f       	mov	r18, r22
     168:	f4 e6       	ldi	r31, 0x64	; 100
     16a:	8f 9f       	mul	r24, r31
     16c:	20 19       	sub	r18, r0
     16e:	11 24       	eor	r1, r1
     170:	cd ec       	ldi	r28, 0xCD	; 205
     172:	2c 9f       	mul	r18, r28
     174:	81 2d       	mov	r24, r1
     176:	11 24       	eor	r1, r1
     178:	86 95       	lsr	r24
     17a:	86 95       	lsr	r24
     17c:	86 95       	lsr	r24
     17e:	b8 01       	movw	r22, r16
     180:	80 5d       	subi	r24, 0xD0	; 208
     182:	0e 94 4d 00 	call	0x9a	; 0x9a <writeChar>
    pp++;
    writeChar( num % 10 + '0', pp);
     186:	b8 01       	movw	r22, r16
     188:	6f 5f       	subi	r22, 0xFF	; 255
     18a:	7f 4f       	sbci	r23, 0xFF	; 255
     18c:	dc 9f       	mul	r29, r28
     18e:	c1 2d       	mov	r28, r1
     190:	11 24       	eor	r1, r1
     192:	c6 95       	lsr	r28
     194:	c6 95       	lsr	r28
     196:	c6 95       	lsr	r28
     198:	cc 0f       	add	r28, r28
     19a:	8c 2f       	mov	r24, r28
     19c:	88 0f       	add	r24, r24
     19e:	88 0f       	add	r24, r24
     1a0:	c8 0f       	add	r28, r24
     1a2:	8d 2f       	mov	r24, r29
     1a4:	8c 1b       	sub	r24, r28
     1a6:	80 5d       	subi	r24, 0xD0	; 208
     1a8:	0e 94 4d 00 	call	0x9a	; 0x9a <writeChar>
}
     1ac:	df 91       	pop	r29
     1ae:	cf 91       	pop	r28
     1b0:	1f 91       	pop	r17
     1b2:	0f 91       	pop	r16
     1b4:	08 95       	ret

000001b6 <switchActive>:

void switchActive(Gui *self, uint8_t status) {

	// Set active signifier in gui to status

	if (self->pos == 0) {
     1b6:	fc 01       	movw	r30, r24
     1b8:	84 81       	ldd	r24, Z+4	; 0x04
     1ba:	81 11       	cpse	r24, r1
     1bc:	08 c0       	rjmp	.+16     	; 0x1ce <switchActive+0x18>
		LCDDR0 = (LCDDR0 & ~(0x1 << 1)) | (status << 1);
     1be:	ec ee       	ldi	r30, 0xEC	; 236
     1c0:	f0 e0       	ldi	r31, 0x00	; 0
     1c2:	80 81       	ld	r24, Z
     1c4:	8d 7f       	andi	r24, 0xFD	; 253
     1c6:	66 0f       	add	r22, r22
     1c8:	68 2b       	or	r22, r24
     1ca:	60 83       	st	Z, r22
     1cc:	08 95       	ret
	}
	else if (self->pos == 4) {
     1ce:	84 30       	cpi	r24, 0x04	; 4
     1d0:	51 f4       	brne	.+20     	; 0x1e6 <switchActive+0x30>
		LCDDR1 = (LCDDR1 & ~(0x1 << 6)) | (status << 6);
     1d2:	ed ee       	ldi	r30, 0xED	; 237
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	80 81       	ld	r24, Z
     1d8:	8f 7b       	andi	r24, 0xBF	; 191
     1da:	90 e4       	ldi	r25, 0x40	; 64
     1dc:	69 9f       	mul	r22, r25
     1de:	b0 01       	movw	r22, r0
     1e0:	11 24       	eor	r1, r1
     1e2:	68 2b       	or	r22, r24
     1e4:	60 83       	st	Z, r22
     1e6:	08 95       	ret

000001e8 <readObserver>:
	ASYNC(self, readObserver, NULL);
}



void readObserver(InputHandler *self){	
     1e8:	af 92       	push	r10
     1ea:	bf 92       	push	r11
     1ec:	cf 92       	push	r12
     1ee:	df 92       	push	r13
     1f0:	ef 92       	push	r14
     1f2:	ff 92       	push	r15
     1f4:	0f 93       	push	r16
     1f6:	1f 93       	push	r17
     1f8:	cf 93       	push	r28
     1fa:	5c 01       	movw	r10, r24
	char RecievedData = SYNC(self->wrt, getChar, NULL);
     1fc:	40 e0       	ldi	r20, 0x00	; 0
     1fe:	50 e0       	ldi	r21, 0x00	; 0
     200:	67 e9       	ldi	r22, 0x97	; 151
     202:	71 e1       	ldi	r23, 0x11	; 17
     204:	fc 01       	movw	r30, r24
     206:	86 81       	ldd	r24, Z+6	; 0x06
     208:	97 81       	ldd	r25, Z+7	; 0x07
     20a:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <sync>
     20e:	c8 2f       	mov	r28, r24
	#define NORTHBOUND_ARRIVE   RecievedData & (1 << 0)
	#define NORTHBOUND_ENTRY	RecievedData & (1 << 1)
	#define SOUTHBOUND_ARRIVE	RecievedData & (1 << 2)
	#define SOUTHBOUND_ENTRY	RecievedData & (1 << 3)
	
	if (NORTHBOUND_ARRIVE)	{ ASYNC(self->state,   carArrived      , 	1)	; } //a
     210:	80 ff       	sbrs	r24, 0
     212:	14 c0       	rjmp	.+40     	; 0x23c <__EEPROM_REGION_LENGTH__+0x3c>
     214:	f5 01       	movw	r30, r10
     216:	04 81       	ldd	r16, Z+4	; 0x04
     218:	15 81       	ldd	r17, Z+5	; 0x05
     21a:	cc 24       	eor	r12, r12
     21c:	c3 94       	inc	r12
     21e:	d1 2c       	mov	r13, r1
     220:	0f 2e       	mov	r0, r31
     222:	fe ec       	ldi	r31, 0xCE	; 206
     224:	ef 2e       	mov	r14, r31
     226:	f2 e0       	ldi	r31, 0x02	; 2
     228:	ff 2e       	mov	r15, r31
     22a:	f0 2d       	mov	r31, r0
     22c:	20 e0       	ldi	r18, 0x00	; 0
     22e:	30 e0       	ldi	r19, 0x00	; 0
     230:	a9 01       	movw	r20, r18
     232:	60 e0       	ldi	r22, 0x00	; 0
     234:	70 e0       	ldi	r23, 0x00	; 0
     236:	cb 01       	movw	r24, r22
     238:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <async>
	if (NORTHBOUND_ENTRY)   { ASYNC(self->state,   startCrossing   , 	1)	; }	//b	
     23c:	c1 ff       	sbrs	r28, 1
     23e:	14 c0       	rjmp	.+40     	; 0x268 <__EEPROM_REGION_LENGTH__+0x68>
     240:	f5 01       	movw	r30, r10
     242:	04 81       	ldd	r16, Z+4	; 0x04
     244:	15 81       	ldd	r17, Z+5	; 0x05
     246:	cc 24       	eor	r12, r12
     248:	c3 94       	inc	r12
     24a:	d1 2c       	mov	r13, r1
     24c:	0f 2e       	mov	r0, r31
     24e:	fa ef       	ldi	r31, 0xFA	; 250
     250:	ef 2e       	mov	r14, r31
     252:	f1 e0       	ldi	r31, 0x01	; 1
     254:	ff 2e       	mov	r15, r31
     256:	f0 2d       	mov	r31, r0
     258:	20 e0       	ldi	r18, 0x00	; 0
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	a9 01       	movw	r20, r18
     25e:	60 e0       	ldi	r22, 0x00	; 0
     260:	70 e0       	ldi	r23, 0x00	; 0
     262:	cb 01       	movw	r24, r22
     264:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <async>
	if (SOUTHBOUND_ARRIVE)	{ ASYNC(self->state,   carArrived      , 	-1)	; } //d
     268:	c2 ff       	sbrs	r28, 2
     26a:	14 c0       	rjmp	.+40     	; 0x294 <__EEPROM_REGION_LENGTH__+0x94>
     26c:	f5 01       	movw	r30, r10
     26e:	04 81       	ldd	r16, Z+4	; 0x04
     270:	15 81       	ldd	r17, Z+5	; 0x05
     272:	cc 24       	eor	r12, r12
     274:	ca 94       	dec	r12
     276:	dc 2c       	mov	r13, r12
     278:	0f 2e       	mov	r0, r31
     27a:	fe ec       	ldi	r31, 0xCE	; 206
     27c:	ef 2e       	mov	r14, r31
     27e:	f2 e0       	ldi	r31, 0x02	; 2
     280:	ff 2e       	mov	r15, r31
     282:	f0 2d       	mov	r31, r0
     284:	20 e0       	ldi	r18, 0x00	; 0
     286:	30 e0       	ldi	r19, 0x00	; 0
     288:	a9 01       	movw	r20, r18
     28a:	60 e0       	ldi	r22, 0x00	; 0
     28c:	70 e0       	ldi	r23, 0x00	; 0
     28e:	cb 01       	movw	r24, r22
     290:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <async>
	if (SOUTHBOUND_ENTRY)   { ASYNC(self->state,   startCrossing   , 	-1)	; } //h
     294:	c3 ff       	sbrs	r28, 3
     296:	14 c0       	rjmp	.+40     	; 0x2c0 <__EEPROM_REGION_LENGTH__+0xc0>
     298:	f5 01       	movw	r30, r10
     29a:	04 81       	ldd	r16, Z+4	; 0x04
     29c:	15 81       	ldd	r17, Z+5	; 0x05
     29e:	cc 24       	eor	r12, r12
     2a0:	ca 94       	dec	r12
     2a2:	dc 2c       	mov	r13, r12
     2a4:	0f 2e       	mov	r0, r31
     2a6:	fa ef       	ldi	r31, 0xFA	; 250
     2a8:	ef 2e       	mov	r14, r31
     2aa:	f1 e0       	ldi	r31, 0x01	; 1
     2ac:	ff 2e       	mov	r15, r31
     2ae:	f0 2d       	mov	r31, r0
     2b0:	20 e0       	ldi	r18, 0x00	; 0
     2b2:	30 e0       	ldi	r19, 0x00	; 0
     2b4:	a9 01       	movw	r20, r18
     2b6:	60 e0       	ldi	r22, 0x00	; 0
     2b8:	70 e0       	ldi	r23, 0x00	; 0
     2ba:	cb 01       	movw	r24, r22
     2bc:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <async>

}
     2c0:	cf 91       	pop	r28
     2c2:	1f 91       	pop	r17
     2c4:	0f 91       	pop	r16
     2c6:	ff 90       	pop	r15
     2c8:	ef 90       	pop	r14
     2ca:	df 90       	pop	r13
     2cc:	cf 90       	pop	r12
     2ce:	bf 90       	pop	r11
     2d0:	af 90       	pop	r10
     2d2:	08 95       	ret

000002d4 <main>:
TrafficLight SL = initTrafficLight(0, -1);
Writer writer = initWriter();


int main(void)
{
     2d4:	cf 93       	push	r28
     2d6:	df 93       	push	r29
	initUtil(&utility, MYUBRR);
     2d8:	63 e3       	ldi	r22, 0x33	; 51
     2da:	70 e0       	ldi	r23, 0x00	; 0
     2dc:	8e e6       	ldi	r24, 0x6E	; 110
     2de:	91 e0       	ldi	r25, 0x01	; 1
     2e0:	0e 94 3e 11 	call	0x227c	; 0x227c <initUtil>
	inputHandler.state = &state;
     2e4:	ae e4       	ldi	r26, 0x4E	; 78
     2e6:	b1 e0       	ldi	r27, 0x01	; 1
     2e8:	e6 e5       	ldi	r30, 0x56	; 86
     2ea:	f1 e0       	ldi	r31, 0x01	; 1
     2ec:	15 96       	adiw	r26, 0x05	; 5
     2ee:	fc 93       	st	X, r31
     2f0:	ee 93       	st	-X, r30
     2f2:	14 97       	sbiw	r26, 0x04	; 4
	inputHandler.wrt = &writer;
     2f4:	86 e4       	ldi	r24, 0x46	; 70
     2f6:	91 e0       	ldi	r25, 0x01	; 1
     2f8:	17 96       	adiw	r26, 0x07	; 7
     2fa:	9c 93       	st	X, r25
     2fc:	8e 93       	st	-X, r24
     2fe:	16 97       	sbiw	r26, 0x06	; 6
	state.gui[0] = &gui[0];
     300:	4e e2       	ldi	r20, 0x2E	; 46
     302:	51 e0       	ldi	r21, 0x01	; 1
     304:	57 87       	std	Z+15, r21	; 0x0f
     306:	46 87       	std	Z+14, r20	; 0x0e
	state.gui[1] = &gui[1];
     308:	23 e3       	ldi	r18, 0x33	; 51
     30a:	31 e0       	ldi	r19, 0x01	; 1
     30c:	31 8b       	std	Z+17, r19	; 0x11
     30e:	20 8b       	std	Z+16, r18	; 0x10
	state.gui[2] = &gui[2];
     310:	28 e3       	ldi	r18, 0x38	; 56
     312:	31 e0       	ldi	r19, 0x01	; 1
     314:	33 8b       	std	Z+19, r19	; 0x13
     316:	22 8b       	std	Z+18, r18	; 0x12
	SL.lightGui = &gui[0]; 
     318:	a6 e1       	ldi	r26, 0x16	; 22
     31a:	b1 e0       	ldi	r27, 0x01	; 1
     31c:	15 96       	adiw	r26, 0x05	; 5
     31e:	5c 93       	st	X, r21
     320:	4e 93       	st	-X, r20
     322:	14 97       	sbiw	r26, 0x04	; 4
	NL.lightGui = &gui[2];
     324:	c2 e2       	ldi	r28, 0x22	; 34
     326:	d1 e0       	ldi	r29, 0x01	; 1
     328:	3d 83       	std	Y+5, r19	; 0x05
     32a:	2c 83       	std	Y+4, r18	; 0x04
    SL.wrt = &writer;
     32c:	1b 96       	adiw	r26, 0x0b	; 11
     32e:	9c 93       	st	X, r25
     330:	8e 93       	st	-X, r24
     332:	1a 97       	sbiw	r26, 0x0a	; 10
    NL.wrt = &writer;
     334:	9b 87       	std	Y+11, r25	; 0x0b
     336:	8a 87       	std	Y+10, r24	; 0x0a
	state.northLight = &NL;
     338:	d3 87       	std	Z+11, r29	; 0x0b
     33a:	c2 87       	std	Z+10, r28	; 0x0a
	state.southLight = &SL;
     33c:	b1 87       	std	Z+9, r27	; 0x09
     33e:	a0 87       	std	Z+8, r26	; 0x08
    INSTALL(&inputHandler, readObserver, IRQ_USART0_RX);
     340:	48 e0       	ldi	r20, 0x08	; 8
     342:	64 ef       	ldi	r22, 0xF4	; 244
     344:	70 e0       	ldi	r23, 0x00	; 0
     346:	8e e4       	ldi	r24, 0x4E	; 78
     348:	91 e0       	ldi	r25, 0x01	; 1
     34a:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <install>
    return TINYTIMBER(&state, initialize, NULL);
     34e:	40 e0       	ldi	r20, 0x00	; 0
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	6c ed       	ldi	r22, 0xDC	; 220
     354:	71 e0       	ldi	r23, 0x01	; 1
     356:	86 e5       	ldi	r24, 0x56	; 86
     358:	91 e0       	ldi	r25, 0x01	; 1
     35a:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <tinytimber>
}
     35e:	df 91       	pop	r29
     360:	cf 91       	pop	r28
     362:	08 95       	ret

00000364 <sendNext>:
            }
            break;
    }
}

void sendNext(State *self, int dir) {
     364:	cf 93       	push	r28
     366:	df 93       	push	r29
     368:	ec 01       	movw	r28, r24
	switch (dir) {
     36a:	6f 3f       	cpi	r22, 0xFF	; 255
     36c:	8f ef       	ldi	r24, 0xFF	; 255
     36e:	78 07       	cpc	r23, r24
     370:	89 f0       	breq	.+34     	; 0x394 <sendNext+0x30>
     372:	61 30       	cpi	r22, 0x01	; 1
     374:	71 05       	cpc	r23, r1
     376:	d9 f4       	brne	.+54     	; 0x3ae <sendNext+0x4a>
		case 1: 
			if (self->northQueue > 0) {
     378:	8c 81       	ldd	r24, Y+4	; 0x04
     37a:	9d 81       	ldd	r25, Y+5	; 0x05
     37c:	18 16       	cp	r1, r24
     37e:	19 06       	cpc	r1, r25
     380:	b4 f4       	brge	.+44     	; 0x3ae <sendNext+0x4a>
				SYNC(self->northLight, setLamp, 1);
     382:	41 e0       	ldi	r20, 0x01	; 1
     384:	50 e0       	ldi	r21, 0x00	; 0
     386:	6f e0       	ldi	r22, 0x0F	; 15
     388:	71 e1       	ldi	r23, 0x11	; 17
     38a:	8a 85       	ldd	r24, Y+10	; 0x0a
     38c:	9b 85       	ldd	r25, Y+11	; 0x0b
     38e:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <sync>
     392:	0d c0       	rjmp	.+26     	; 0x3ae <sendNext+0x4a>
			}
			break;
		case -1:
			if (self->southQueue > 0) {
     394:	8e 81       	ldd	r24, Y+6	; 0x06
     396:	9f 81       	ldd	r25, Y+7	; 0x07
     398:	18 16       	cp	r1, r24
     39a:	19 06       	cpc	r1, r25
     39c:	44 f4       	brge	.+16     	; 0x3ae <sendNext+0x4a>
				SYNC(self->southLight, setLamp, 1);
     39e:	41 e0       	ldi	r20, 0x01	; 1
     3a0:	50 e0       	ldi	r21, 0x00	; 0
     3a2:	6f e0       	ldi	r22, 0x0F	; 15
     3a4:	71 e1       	ldi	r23, 0x11	; 17
     3a6:	88 85       	ldd	r24, Y+8	; 0x08
     3a8:	99 85       	ldd	r25, Y+9	; 0x09
     3aa:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <sync>
			}
			break;
	}

	self->currNext = NULL;
     3ae:	1f 8a       	std	Y+23, r1	; 0x17
     3b0:	1e 8a       	std	Y+22, r1	; 0x16
}
     3b2:	df 91       	pop	r29
     3b4:	cf 91       	pop	r28
     3b6:	08 95       	ret

000003b8 <initialize>:

// 1 north
// -1 south


void initialize(State *self) {
     3b8:	cf 93       	push	r28
     3ba:	df 93       	push	r29
     3bc:	ec 01       	movw	r28, r24
	SYNC(self->gui[0], printAt, 0);
     3be:	40 e0       	ldi	r20, 0x00	; 0
     3c0:	50 e0       	ldi	r21, 0x00	; 0
     3c2:	65 ea       	ldi	r22, 0xA5	; 165
     3c4:	70 e0       	ldi	r23, 0x00	; 0
     3c6:	8e 85       	ldd	r24, Y+14	; 0x0e
     3c8:	9f 85       	ldd	r25, Y+15	; 0x0f
     3ca:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <sync>
	SYNC(self->gui[1], printAt, 0);
     3ce:	40 e0       	ldi	r20, 0x00	; 0
     3d0:	50 e0       	ldi	r21, 0x00	; 0
     3d2:	65 ea       	ldi	r22, 0xA5	; 165
     3d4:	70 e0       	ldi	r23, 0x00	; 0
     3d6:	88 89       	ldd	r24, Y+16	; 0x10
     3d8:	99 89       	ldd	r25, Y+17	; 0x11
     3da:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <sync>
	SYNC(self->gui[2], printAt, 0);
     3de:	40 e0       	ldi	r20, 0x00	; 0
     3e0:	50 e0       	ldi	r21, 0x00	; 0
     3e2:	65 ea       	ldi	r22, 0xA5	; 165
     3e4:	70 e0       	ldi	r23, 0x00	; 0
     3e6:	8a 89       	ldd	r24, Y+18	; 0x12
     3e8:	9b 89       	ldd	r25, Y+19	; 0x13
     3ea:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <sync>
}
     3ee:	df 91       	pop	r29
     3f0:	cf 91       	pop	r28
     3f2:	08 95       	ret

000003f4 <startCrossing>:

	self->currNext = NULL;
}


void startCrossing(State *self, int dir) {
     3f4:	af 92       	push	r10
     3f6:	bf 92       	push	r11
     3f8:	cf 92       	push	r12
     3fa:	df 92       	push	r13
     3fc:	ef 92       	push	r14
     3fe:	ff 92       	push	r15
     400:	0f 93       	push	r16
     402:	1f 93       	push	r17
     404:	cf 93       	push	r28
     406:	df 93       	push	r29
     408:	ec 01       	movw	r28, r24
     40a:	5b 01       	movw	r10, r22
	self->crossing += dir;
     40c:	8c 85       	ldd	r24, Y+12	; 0x0c
     40e:	9d 85       	ldd	r25, Y+13	; 0x0d
     410:	86 0f       	add	r24, r22
     412:	97 1f       	adc	r25, r23
     414:	9d 87       	std	Y+13, r25	; 0x0d
     416:	8c 87       	std	Y+12, r24	; 0x0c
	SYNC(self->gui[1], printAt, abs(self->crossing));
     418:	ac 01       	movw	r20, r24
     41a:	99 23       	and	r25, r25
     41c:	24 f4       	brge	.+8      	; 0x426 <__DATA_REGION_LENGTH__+0x26>
     41e:	44 27       	eor	r20, r20
     420:	55 27       	eor	r21, r21
     422:	48 1b       	sub	r20, r24
     424:	59 0b       	sbc	r21, r25
     426:	65 ea       	ldi	r22, 0xA5	; 165
     428:	70 e0       	ldi	r23, 0x00	; 0
     42a:	88 89       	ldd	r24, Y+16	; 0x10
     42c:	99 89       	ldd	r25, Y+17	; 0x11
     42e:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <sync>
    switch (dir) {
     432:	8f ef       	ldi	r24, 0xFF	; 255
     434:	a8 16       	cp	r10, r24
     436:	b8 06       	cpc	r11, r24
     438:	c9 f0       	breq	.+50     	; 0x46c <__DATA_REGION_LENGTH__+0x6c>
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	a8 16       	cp	r10, r24
     43e:	b1 04       	cpc	r11, r1
     440:	49 f5       	brne	.+82     	; 0x494 <__DATA_REGION_LENGTH__+0x94>
        case 1:
            self->northQueue -= 1;
     442:	4c 81       	ldd	r20, Y+4	; 0x04
     444:	5d 81       	ldd	r21, Y+5	; 0x05
     446:	41 50       	subi	r20, 0x01	; 1
     448:	51 09       	sbc	r21, r1
     44a:	5d 83       	std	Y+5, r21	; 0x05
     44c:	4c 83       	std	Y+4, r20	; 0x04
			SYNC(self->gui[2], printAt, self->northQueue);
     44e:	65 ea       	ldi	r22, 0xA5	; 165
     450:	70 e0       	ldi	r23, 0x00	; 0
     452:	8a 89       	ldd	r24, Y+18	; 0x12
     454:	9b 89       	ldd	r25, Y+19	; 0x13
     456:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <sync>
			SYNC(self->northLight, setLamp, 0);
     45a:	40 e0       	ldi	r20, 0x00	; 0
     45c:	50 e0       	ldi	r21, 0x00	; 0
     45e:	6f e0       	ldi	r22, 0x0F	; 15
     460:	71 e1       	ldi	r23, 0x11	; 17
     462:	8a 85       	ldd	r24, Y+10	; 0x0a
     464:	9b 85       	ldd	r25, Y+11	; 0x0b
     466:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <sync>
            break;
     46a:	14 c0       	rjmp	.+40     	; 0x494 <__DATA_REGION_LENGTH__+0x94>
        case -1:
            self->southQueue -= 1;
     46c:	4e 81       	ldd	r20, Y+6	; 0x06
     46e:	5f 81       	ldd	r21, Y+7	; 0x07
     470:	41 50       	subi	r20, 0x01	; 1
     472:	51 09       	sbc	r21, r1
     474:	5f 83       	std	Y+7, r21	; 0x07
     476:	4e 83       	std	Y+6, r20	; 0x06
			SYNC(self->gui[0], printAt, self->southQueue);
     478:	65 ea       	ldi	r22, 0xA5	; 165
     47a:	70 e0       	ldi	r23, 0x00	; 0
     47c:	8e 85       	ldd	r24, Y+14	; 0x0e
     47e:	9f 85       	ldd	r25, Y+15	; 0x0f
     480:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <sync>
			SYNC(self->southLight, setLamp, 0);
     484:	40 e0       	ldi	r20, 0x00	; 0
     486:	50 e0       	ldi	r21, 0x00	; 0
     488:	6f e0       	ldi	r22, 0x0F	; 15
     48a:	71 e1       	ldi	r23, 0x11	; 17
     48c:	88 85       	ldd	r24, Y+8	; 0x08
     48e:	99 85       	ldd	r25, Y+9	; 0x09
     490:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <sync>
            break;
        self->crossing += dir;
		SYNC(self->gui[1], printAt, abs(self->crossing));    
    }
    AFTER(SEC(5), self, hasCrossed, dir);
     494:	65 01       	movw	r12, r10
     496:	0f 2e       	mov	r0, r31
     498:	fd ee       	ldi	r31, 0xED	; 237
     49a:	ef 2e       	mov	r14, r31
     49c:	f3 e0       	ldi	r31, 0x03	; 3
     49e:	ff 2e       	mov	r15, r31
     4a0:	f0 2d       	mov	r31, r0
     4a2:	8e 01       	movw	r16, r28
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	30 e0       	ldi	r19, 0x00	; 0
     4a8:	a9 01       	movw	r20, r18
     4aa:	6a e5       	ldi	r22, 0x5A	; 90
     4ac:	72 e6       	ldi	r23, 0x62	; 98
     4ae:	82 e0       	ldi	r24, 0x02	; 2
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <async>
    self->currNext = AFTER(SEC(1), self, sendNext, dir);
     4b6:	0f 2e       	mov	r0, r31
     4b8:	f2 eb       	ldi	r31, 0xB2	; 178
     4ba:	ef 2e       	mov	r14, r31
     4bc:	f1 e0       	ldi	r31, 0x01	; 1
     4be:	ff 2e       	mov	r15, r31
     4c0:	f0 2d       	mov	r31, r0
     4c2:	20 e0       	ldi	r18, 0x00	; 0
     4c4:	30 e0       	ldi	r19, 0x00	; 0
     4c6:	a9 01       	movw	r20, r18
     4c8:	62 e1       	ldi	r22, 0x12	; 18
     4ca:	7a e7       	ldi	r23, 0x7A	; 122
     4cc:	80 e0       	ldi	r24, 0x00	; 0
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <async>
     4d4:	9f 8b       	std	Y+23, r25	; 0x17
     4d6:	8e 8b       	std	Y+22, r24	; 0x16
}
     4d8:	df 91       	pop	r29
     4da:	cf 91       	pop	r28
     4dc:	1f 91       	pop	r17
     4de:	0f 91       	pop	r16
     4e0:	ff 90       	pop	r15
     4e2:	ef 90       	pop	r14
     4e4:	df 90       	pop	r13
     4e6:	cf 90       	pop	r12
     4e8:	bf 90       	pop	r11
     4ea:	af 90       	pop	r10
     4ec:	08 95       	ret

000004ee <changeLights>:
        }
    }

}

void changeLights(State *self, int newActive, int dir) {
     4ee:	af 92       	push	r10
     4f0:	bf 92       	push	r11
     4f2:	cf 92       	push	r12
     4f4:	df 92       	push	r13
     4f6:	ef 92       	push	r14
     4f8:	ff 92       	push	r15
     4fa:	0f 93       	push	r16
     4fc:	1f 93       	push	r17
     4fe:	cf 93       	push	r28
     500:	df 93       	push	r29
     502:	5c 01       	movw	r10, r24
     504:	eb 01       	movw	r28, r22
     506:	6a 01       	movw	r12, r20
	switch(dir) {
     508:	4f 3f       	cpi	r20, 0xFF	; 255
     50a:	8f ef       	ldi	r24, 0xFF	; 255
     50c:	58 07       	cpc	r21, r24
     50e:	61 f0       	breq	.+24     	; 0x528 <__stack+0x29>
     510:	41 30       	cpi	r20, 0x01	; 1
     512:	51 05       	cpc	r21, r1
     514:	89 f4       	brne	.+34     	; 0x538 <__stack+0x39>
		case 1:
			SYNC(self->northLight, setLamp, newActive);
     516:	ab 01       	movw	r20, r22
     518:	6f e0       	ldi	r22, 0x0F	; 15
     51a:	71 e1       	ldi	r23, 0x11	; 17
     51c:	f5 01       	movw	r30, r10
     51e:	82 85       	ldd	r24, Z+10	; 0x0a
     520:	93 85       	ldd	r25, Z+11	; 0x0b
     522:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <sync>
			break;
     526:	08 c0       	rjmp	.+16     	; 0x538 <__stack+0x39>
		case -1:
			SYNC(self->southLight, setLamp, newActive);
     528:	ab 01       	movw	r20, r22
     52a:	6f e0       	ldi	r22, 0x0F	; 15
     52c:	71 e1       	ldi	r23, 0x11	; 17
     52e:	f5 01       	movw	r30, r10
     530:	80 85       	ldd	r24, Z+8	; 0x08
     532:	91 85       	ldd	r25, Z+9	; 0x09
     534:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <sync>
			break;
	}
	switch (newActive) {
     538:	20 97       	sbiw	r28, 0x00	; 0
     53a:	d9 f0       	breq	.+54     	; 0x572 <__stack+0x73>
     53c:	21 97       	sbiw	r28, 0x01	; 1
     53e:	19 f5       	brne	.+70     	; 0x586 <__stack+0x87>
		case 1:
			if (!(self->currTimeout)) {
     540:	f5 01       	movw	r30, r10
     542:	84 89       	ldd	r24, Z+20	; 0x14
     544:	95 89       	ldd	r25, Z+21	; 0x15
     546:	89 2b       	or	r24, r25
     548:	f1 f4       	brne	.+60     	; 0x586 <__stack+0x87>
				self->currTimeout = AFTER(SEC(5), self, timeout, dir);
     54a:	0f 2e       	mov	r0, r31
     54c:	f0 e5       	ldi	r31, 0x50	; 80
     54e:	ef 2e       	mov	r14, r31
     550:	f3 e0       	ldi	r31, 0x03	; 3
     552:	ff 2e       	mov	r15, r31
     554:	f0 2d       	mov	r31, r0
     556:	85 01       	movw	r16, r10
     558:	20 e0       	ldi	r18, 0x00	; 0
     55a:	30 e0       	ldi	r19, 0x00	; 0
     55c:	a9 01       	movw	r20, r18
     55e:	6a e5       	ldi	r22, 0x5A	; 90
     560:	72 e6       	ldi	r23, 0x62	; 98
     562:	82 e0       	ldi	r24, 0x02	; 2
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <async>
     56a:	f5 01       	movw	r30, r10
     56c:	95 8b       	std	Z+21, r25	; 0x15
     56e:	84 8b       	std	Z+20, r24	; 0x14
     570:	0a c0       	rjmp	.+20     	; 0x586 <__stack+0x87>
			}
			break;
		case 0:
			if (self->currTimeout) {
     572:	f5 01       	movw	r30, r10
     574:	84 89       	ldd	r24, Z+20	; 0x14
     576:	95 89       	ldd	r25, Z+21	; 0x15
     578:	00 97       	sbiw	r24, 0x00	; 0
     57a:	29 f0       	breq	.+10     	; 0x586 <__stack+0x87>
				ABORT(self->currTimeout);
     57c:	0e 94 88 10 	call	0x2110	; 0x2110 <ABORT>
				self->currTimeout = NULL;
     580:	f5 01       	movw	r30, r10
     582:	15 8a       	std	Z+21, r1	; 0x15
     584:	14 8a       	std	Z+20, r1	; 0x14
			}
			break;		
	}
}
     586:	df 91       	pop	r29
     588:	cf 91       	pop	r28
     58a:	1f 91       	pop	r17
     58c:	0f 91       	pop	r16
     58e:	ff 90       	pop	r15
     590:	ef 90       	pop	r14
     592:	df 90       	pop	r13
     594:	cf 90       	pop	r12
     596:	bf 90       	pop	r11
     598:	af 90       	pop	r10
     59a:	08 95       	ret

0000059c <carArrived>:
	SYNC(self->gui[0], printAt, 0);
	SYNC(self->gui[1], printAt, 0);
	SYNC(self->gui[2], printAt, 0);
}

void carArrived(State *self, int dir) {
     59c:	0f 93       	push	r16
     59e:	1f 93       	push	r17
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
     5a4:	00 d0       	rcall	.+0      	; 0x5a6 <carArrived+0xa>
     5a6:	cd b7       	in	r28, 0x3d	; 61
     5a8:	de b7       	in	r29, 0x3e	; 62
     5aa:	8c 01       	movw	r16, r24
		volatile int oppAct;
        switch (dir) {
     5ac:	6f 3f       	cpi	r22, 0xFF	; 255
     5ae:	8f ef       	ldi	r24, 0xFF	; 255
     5b0:	78 07       	cpc	r23, r24
     5b2:	d9 f1       	breq	.+118    	; 0x62a <carArrived+0x8e>
     5b4:	61 30       	cpi	r22, 0x01	; 1
     5b6:	71 05       	cpc	r23, r1
     5b8:	09 f0       	breq	.+2      	; 0x5bc <carArrived+0x20>
     5ba:	6b c0       	rjmp	.+214    	; 0x692 <carArrived+0xf6>
			case 1:

				self->northQueue += 1;
     5bc:	f8 01       	movw	r30, r16
     5be:	44 81       	ldd	r20, Z+4	; 0x04
     5c0:	55 81       	ldd	r21, Z+5	; 0x05
     5c2:	4f 5f       	subi	r20, 0xFF	; 255
     5c4:	5f 4f       	sbci	r21, 0xFF	; 255
     5c6:	55 83       	std	Z+5, r21	; 0x05
     5c8:	44 83       	std	Z+4, r20	; 0x04
				SYNC(self->gui[2], printAt, self->northQueue);
     5ca:	65 ea       	ldi	r22, 0xA5	; 165
     5cc:	70 e0       	ldi	r23, 0x00	; 0
     5ce:	82 89       	ldd	r24, Z+18	; 0x12
     5d0:	93 89       	ldd	r25, Z+19	; 0x13
     5d2:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <sync>
				oppAct = SYNC(self->southLight, getLamp, NULL);
     5d6:	40 e0       	ldi	r20, 0x00	; 0
     5d8:	50 e0       	ldi	r21, 0x00	; 0
     5da:	6a e3       	ldi	r22, 0x3A	; 58
     5dc:	71 e1       	ldi	r23, 0x11	; 17
     5de:	f8 01       	movw	r30, r16
     5e0:	80 85       	ldd	r24, Z+8	; 0x08
     5e2:	91 85       	ldd	r25, Z+9	; 0x09
     5e4:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <sync>
     5e8:	9a 83       	std	Y+2, r25	; 0x02
     5ea:	89 83       	std	Y+1, r24	; 0x01
				if ((self->crossing >= 0) && !(oppAct == 1) && (!self->currNext) && (self->crossing == 0 || self->currTimeout)) {
     5ec:	f8 01       	movw	r30, r16
     5ee:	84 85       	ldd	r24, Z+12	; 0x0c
     5f0:	95 85       	ldd	r25, Z+13	; 0x0d
     5f2:	99 23       	and	r25, r25
     5f4:	0c f4       	brge	.+2      	; 0x5f8 <carArrived+0x5c>
     5f6:	4d c0       	rjmp	.+154    	; 0x692 <carArrived+0xf6>
     5f8:	29 81       	ldd	r18, Y+1	; 0x01
     5fa:	3a 81       	ldd	r19, Y+2	; 0x02
     5fc:	21 30       	cpi	r18, 0x01	; 1
     5fe:	31 05       	cpc	r19, r1
     600:	09 f4       	brne	.+2      	; 0x604 <carArrived+0x68>
     602:	47 c0       	rjmp	.+142    	; 0x692 <carArrived+0xf6>
     604:	26 89       	ldd	r18, Z+22	; 0x16
     606:	37 89       	ldd	r19, Z+23	; 0x17
     608:	23 2b       	or	r18, r19
     60a:	09 f0       	breq	.+2      	; 0x60e <carArrived+0x72>
     60c:	42 c0       	rjmp	.+132    	; 0x692 <carArrived+0xf6>
     60e:	89 2b       	or	r24, r25
     610:	21 f0       	breq	.+8      	; 0x61a <carArrived+0x7e>
     612:	84 89       	ldd	r24, Z+20	; 0x14
     614:	95 89       	ldd	r25, Z+21	; 0x15
     616:	89 2b       	or	r24, r25
     618:	e1 f1       	breq	.+120    	; 0x692 <carArrived+0xf6>
					changeLights(self, 1, 1);
     61a:	41 e0       	ldi	r20, 0x01	; 1
     61c:	50 e0       	ldi	r21, 0x00	; 0
     61e:	61 e0       	ldi	r22, 0x01	; 1
     620:	70 e0       	ldi	r23, 0x00	; 0
     622:	c8 01       	movw	r24, r16
     624:	0e 94 77 02 	call	0x4ee	; 0x4ee <changeLights>
     628:	34 c0       	rjmp	.+104    	; 0x692 <carArrived+0xf6>
				}
				break;
			case -1:
				self->southQueue += 1;
     62a:	f8 01       	movw	r30, r16
     62c:	46 81       	ldd	r20, Z+6	; 0x06
     62e:	57 81       	ldd	r21, Z+7	; 0x07
     630:	4f 5f       	subi	r20, 0xFF	; 255
     632:	5f 4f       	sbci	r21, 0xFF	; 255
     634:	57 83       	std	Z+7, r21	; 0x07
     636:	46 83       	std	Z+6, r20	; 0x06
				SYNC(self->gui[0], printAt, self->southQueue);
     638:	65 ea       	ldi	r22, 0xA5	; 165
     63a:	70 e0       	ldi	r23, 0x00	; 0
     63c:	86 85       	ldd	r24, Z+14	; 0x0e
     63e:	97 85       	ldd	r25, Z+15	; 0x0f
     640:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <sync>
				oppAct = SYNC(self->northLight, getLamp, NULL);
     644:	40 e0       	ldi	r20, 0x00	; 0
     646:	50 e0       	ldi	r21, 0x00	; 0
     648:	6a e3       	ldi	r22, 0x3A	; 58
     64a:	71 e1       	ldi	r23, 0x11	; 17
     64c:	f8 01       	movw	r30, r16
     64e:	82 85       	ldd	r24, Z+10	; 0x0a
     650:	93 85       	ldd	r25, Z+11	; 0x0b
     652:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <sync>
     656:	9a 83       	std	Y+2, r25	; 0x02
     658:	89 83       	std	Y+1, r24	; 0x01
				if ((self->crossing <= 0) && !(oppAct == 1) && (!self->currNext) && (self->crossing == 0 || self->currTimeout)) {
     65a:	f8 01       	movw	r30, r16
     65c:	84 85       	ldd	r24, Z+12	; 0x0c
     65e:	95 85       	ldd	r25, Z+13	; 0x0d
     660:	18 16       	cp	r1, r24
     662:	19 06       	cpc	r1, r25
     664:	b4 f0       	brlt	.+44     	; 0x692 <carArrived+0xf6>
     666:	29 81       	ldd	r18, Y+1	; 0x01
     668:	3a 81       	ldd	r19, Y+2	; 0x02
     66a:	21 30       	cpi	r18, 0x01	; 1
     66c:	31 05       	cpc	r19, r1
     66e:	89 f0       	breq	.+34     	; 0x692 <carArrived+0xf6>
     670:	26 89       	ldd	r18, Z+22	; 0x16
     672:	37 89       	ldd	r19, Z+23	; 0x17
     674:	23 2b       	or	r18, r19
     676:	69 f4       	brne	.+26     	; 0x692 <carArrived+0xf6>
     678:	89 2b       	or	r24, r25
     67a:	21 f0       	breq	.+8      	; 0x684 <carArrived+0xe8>
     67c:	84 89       	ldd	r24, Z+20	; 0x14
     67e:	95 89       	ldd	r25, Z+21	; 0x15
     680:	89 2b       	or	r24, r25
     682:	39 f0       	breq	.+14     	; 0x692 <carArrived+0xf6>
					changeLights(self, 1, -1);  
     684:	4f ef       	ldi	r20, 0xFF	; 255
     686:	5f ef       	ldi	r21, 0xFF	; 255
     688:	61 e0       	ldi	r22, 0x01	; 1
     68a:	70 e0       	ldi	r23, 0x00	; 0
     68c:	c8 01       	movw	r24, r16
     68e:	0e 94 77 02 	call	0x4ee	; 0x4ee <changeLights>
                }
			    break;
    }
}
     692:	0f 90       	pop	r0
     694:	0f 90       	pop	r0
     696:	df 91       	pop	r29
     698:	cf 91       	pop	r28
     69a:	1f 91       	pop	r17
     69c:	0f 91       	pop	r16
     69e:	08 95       	ret

000006a0 <timeout>:
    //If there is a queue of cars from a particular direction, better bridge utilization will be achieved by letting more than one car pass from the same direction before allowing cars from the other direction. Delay between cars from the same direction should be 1 second.
    //For our particular scenario, we will assume that a reasonable time for passing the bridge once it is entered is 5 seconds.
    //It is, however, not required to deal with cars that stop on the bridge, make u-turns, ignore green lights, ignore red lights, ignore the one-car-per-green restriction, drive at extreme speeds (high and low), etc. These are not unrealistic assumptions – few real traffic light systems are designed to detect (say) cars that stop in the middle of a crossing due to engine failure.


void timeout(State *self, int dir) {
     6a0:	0f 93       	push	r16
     6a2:	1f 93       	push	r17
     6a4:	cf 93       	push	r28
     6a6:	df 93       	push	r29
     6a8:	ec 01       	movw	r28, r24
     6aa:	8b 01       	movw	r16, r22
	if (self->currNext) {
     6ac:	8e 89       	ldd	r24, Y+22	; 0x16
     6ae:	9f 89       	ldd	r25, Y+23	; 0x17
     6b0:	00 97       	sbiw	r24, 0x00	; 0
     6b2:	21 f0       	breq	.+8      	; 0x6bc <timeout+0x1c>
		ABORT(self->currNext);
     6b4:	0e 94 88 10 	call	0x2110	; 0x2110 <ABORT>
        self->currNext = NULL;
     6b8:	1f 8a       	std	Y+23, r1	; 0x17
     6ba:	1e 8a       	std	Y+22, r1	; 0x16
    }
	self->currTimeout = NULL;
     6bc:	1d 8a       	std	Y+21, r1	; 0x15
     6be:	1c 8a       	std	Y+20, r1	; 0x14
    switch (dir) {
     6c0:	0f 3f       	cpi	r16, 0xFF	; 255
     6c2:	8f ef       	ldi	r24, 0xFF	; 255
     6c4:	18 07       	cpc	r17, r24
     6c6:	09 f4       	brne	.+2      	; 0x6ca <timeout+0x2a>
     6c8:	44 c0       	rjmp	.+136    	; 0x752 <timeout+0xb2>
     6ca:	01 30       	cpi	r16, 0x01	; 1
     6cc:	11 05       	cpc	r17, r1
     6ce:	09 f0       	breq	.+2      	; 0x6d2 <timeout+0x32>
     6d0:	7f c0       	rjmp	.+254    	; 0x7d0 <timeout+0x130>
        case 1: 
            if (self->crossing != 0) {
     6d2:	8c 85       	ldd	r24, Y+12	; 0x0c
     6d4:	9d 85       	ldd	r25, Y+13	; 0x0d
     6d6:	89 2b       	or	r24, r25
     6d8:	a1 f0       	breq	.+40     	; 0x702 <timeout+0x62>
                if (self->southQueue == 0) {
     6da:	8e 81       	ldd	r24, Y+6	; 0x06
     6dc:	9f 81       	ldd	r25, Y+7	; 0x07
     6de:	89 2b       	or	r24, r25
     6e0:	41 f4       	brne	.+16     	; 0x6f2 <timeout+0x52>
                    //reset timeout
                    changeLights(self, 1, 1);   //set north to green
     6e2:	41 e0       	ldi	r20, 0x01	; 1
     6e4:	50 e0       	ldi	r21, 0x00	; 0
     6e6:	61 e0       	ldi	r22, 0x01	; 1
     6e8:	70 e0       	ldi	r23, 0x00	; 0
     6ea:	ce 01       	movw	r24, r28
     6ec:	0e 94 77 02 	call	0x4ee	; 0x4ee <changeLights>
     6f0:	6f c0       	rjmp	.+222    	; 0x7d0 <timeout+0x130>
                } else {
                    changeLights(self, 0, 1);   //set north to red
     6f2:	41 e0       	ldi	r20, 0x01	; 1
     6f4:	50 e0       	ldi	r21, 0x00	; 0
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	70 e0       	ldi	r23, 0x00	; 0
     6fa:	ce 01       	movw	r24, r28
     6fc:	0e 94 77 02 	call	0x4ee	; 0x4ee <changeLights>
     700:	67 c0       	rjmp	.+206    	; 0x7d0 <timeout+0x130>
                }
            } else {
                if (self->southQueue > 0) {
     702:	8e 81       	ldd	r24, Y+6	; 0x06
     704:	9f 81       	ldd	r25, Y+7	; 0x07
     706:	18 16       	cp	r1, r24
     708:	19 06       	cpc	r1, r25
     70a:	7c f4       	brge	.+30     	; 0x72a <timeout+0x8a>
                    changeLights(self, 0, 1);   //set north to red
     70c:	41 e0       	ldi	r20, 0x01	; 1
     70e:	50 e0       	ldi	r21, 0x00	; 0
     710:	60 e0       	ldi	r22, 0x00	; 0
     712:	70 e0       	ldi	r23, 0x00	; 0
     714:	ce 01       	movw	r24, r28
     716:	0e 94 77 02 	call	0x4ee	; 0x4ee <changeLights>
                    changeLights(self, 1, -1);  //set south to green
     71a:	4f ef       	ldi	r20, 0xFF	; 255
     71c:	5f ef       	ldi	r21, 0xFF	; 255
     71e:	61 e0       	ldi	r22, 0x01	; 1
     720:	70 e0       	ldi	r23, 0x00	; 0
     722:	ce 01       	movw	r24, r28
     724:	0e 94 77 02 	call	0x4ee	; 0x4ee <changeLights>
     728:	53 c0       	rjmp	.+166    	; 0x7d0 <timeout+0x130>
                } 
                else if(self->northQueue == 0) {
     72a:	8c 81       	ldd	r24, Y+4	; 0x04
     72c:	9d 81       	ldd	r25, Y+5	; 0x05
     72e:	89 2b       	or	r24, r25
     730:	41 f4       	brne	.+16     	; 0x742 <timeout+0xa2>
                    changeLights(self, 0, 1);   //set north to red
     732:	41 e0       	ldi	r20, 0x01	; 1
     734:	50 e0       	ldi	r21, 0x00	; 0
     736:	60 e0       	ldi	r22, 0x00	; 0
     738:	70 e0       	ldi	r23, 0x00	; 0
     73a:	ce 01       	movw	r24, r28
     73c:	0e 94 77 02 	call	0x4ee	; 0x4ee <changeLights>
     740:	47 c0       	rjmp	.+142    	; 0x7d0 <timeout+0x130>
                } 
                else {
                    //reset timeout
                    changeLights(self, 1, 1);   //set north to green
     742:	41 e0       	ldi	r20, 0x01	; 1
     744:	50 e0       	ldi	r21, 0x00	; 0
     746:	61 e0       	ldi	r22, 0x01	; 1
     748:	70 e0       	ldi	r23, 0x00	; 0
     74a:	ce 01       	movw	r24, r28
     74c:	0e 94 77 02 	call	0x4ee	; 0x4ee <changeLights>
     750:	3f c0       	rjmp	.+126    	; 0x7d0 <timeout+0x130>
                }
            }
            break;
        case -1:
            if (self->crossing != 0) {
     752:	8c 85       	ldd	r24, Y+12	; 0x0c
     754:	9d 85       	ldd	r25, Y+13	; 0x0d
     756:	89 2b       	or	r24, r25
     758:	a1 f0       	breq	.+40     	; 0x782 <timeout+0xe2>
                    if (self->northQueue == 0) {
     75a:	8c 81       	ldd	r24, Y+4	; 0x04
     75c:	9d 81       	ldd	r25, Y+5	; 0x05
     75e:	89 2b       	or	r24, r25
     760:	41 f4       	brne	.+16     	; 0x772 <timeout+0xd2>
                        //reset timeout
                        changeLights(self, 1, -1);   //set south to green
     762:	4f ef       	ldi	r20, 0xFF	; 255
     764:	5f ef       	ldi	r21, 0xFF	; 255
     766:	61 e0       	ldi	r22, 0x01	; 1
     768:	70 e0       	ldi	r23, 0x00	; 0
     76a:	ce 01       	movw	r24, r28
     76c:	0e 94 77 02 	call	0x4ee	; 0x4ee <changeLights>
     770:	2f c0       	rjmp	.+94     	; 0x7d0 <timeout+0x130>
                    } else {
                        changeLights(self, 0, -1);   //set south to red
     772:	4f ef       	ldi	r20, 0xFF	; 255
     774:	5f ef       	ldi	r21, 0xFF	; 255
     776:	60 e0       	ldi	r22, 0x00	; 0
     778:	70 e0       	ldi	r23, 0x00	; 0
     77a:	ce 01       	movw	r24, r28
     77c:	0e 94 77 02 	call	0x4ee	; 0x4ee <changeLights>
     780:	27 c0       	rjmp	.+78     	; 0x7d0 <timeout+0x130>
                    }
                } else {
                    if (self->northQueue > 0) {
     782:	8c 81       	ldd	r24, Y+4	; 0x04
     784:	9d 81       	ldd	r25, Y+5	; 0x05
     786:	18 16       	cp	r1, r24
     788:	19 06       	cpc	r1, r25
     78a:	7c f4       	brge	.+30     	; 0x7aa <timeout+0x10a>
                        changeLights(self, 0, -1);   //set south to red
     78c:	4f ef       	ldi	r20, 0xFF	; 255
     78e:	5f ef       	ldi	r21, 0xFF	; 255
     790:	60 e0       	ldi	r22, 0x00	; 0
     792:	70 e0       	ldi	r23, 0x00	; 0
     794:	ce 01       	movw	r24, r28
     796:	0e 94 77 02 	call	0x4ee	; 0x4ee <changeLights>
                        changeLights(self, 1, 1);  //set north to green
     79a:	41 e0       	ldi	r20, 0x01	; 1
     79c:	50 e0       	ldi	r21, 0x00	; 0
     79e:	61 e0       	ldi	r22, 0x01	; 1
     7a0:	70 e0       	ldi	r23, 0x00	; 0
     7a2:	ce 01       	movw	r24, r28
     7a4:	0e 94 77 02 	call	0x4ee	; 0x4ee <changeLights>
     7a8:	13 c0       	rjmp	.+38     	; 0x7d0 <timeout+0x130>
                    } 
                    else if(self->southQueue == 0) {
     7aa:	8e 81       	ldd	r24, Y+6	; 0x06
     7ac:	9f 81       	ldd	r25, Y+7	; 0x07
     7ae:	89 2b       	or	r24, r25
     7b0:	41 f4       	brne	.+16     	; 0x7c2 <timeout+0x122>
                        changeLights(self, 0, -1);   //set south to red
     7b2:	4f ef       	ldi	r20, 0xFF	; 255
     7b4:	5f ef       	ldi	r21, 0xFF	; 255
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	70 e0       	ldi	r23, 0x00	; 0
     7ba:	ce 01       	movw	r24, r28
     7bc:	0e 94 77 02 	call	0x4ee	; 0x4ee <changeLights>
     7c0:	07 c0       	rjmp	.+14     	; 0x7d0 <timeout+0x130>
						
                    } 
                    else {
                        //reset timeout
                        changeLights(self, 1, -1);   //set south to green
     7c2:	4f ef       	ldi	r20, 0xFF	; 255
     7c4:	5f ef       	ldi	r21, 0xFF	; 255
     7c6:	61 e0       	ldi	r22, 0x01	; 1
     7c8:	70 e0       	ldi	r23, 0x00	; 0
     7ca:	ce 01       	movw	r24, r28
     7cc:	0e 94 77 02 	call	0x4ee	; 0x4ee <changeLights>
                    }
            }
            break;
    }
}
     7d0:	df 91       	pop	r29
     7d2:	cf 91       	pop	r28
     7d4:	1f 91       	pop	r17
     7d6:	0f 91       	pop	r16
     7d8:	08 95       	ret

000007da <hasCrossed>:
    }
    AFTER(SEC(5), self, hasCrossed, dir);
    self->currNext = AFTER(SEC(1), self, sendNext, dir);
}

void hasCrossed(State *self, int dir) {
     7da:	0f 93       	push	r16
     7dc:	1f 93       	push	r17
     7de:	cf 93       	push	r28
     7e0:	df 93       	push	r29
     7e2:	ec 01       	movw	r28, r24
     7e4:	8b 01       	movw	r16, r22

    // Once car has crossed, if its the last one on the road and other queue is waiting, switch lights
    // If no car is waiting, both lights will be red

    self->crossing -= dir;
     7e6:	8c 85       	ldd	r24, Y+12	; 0x0c
     7e8:	9d 85       	ldd	r25, Y+13	; 0x0d
     7ea:	86 1b       	sub	r24, r22
     7ec:	97 0b       	sbc	r25, r23
     7ee:	9d 87       	std	Y+13, r25	; 0x0d
     7f0:	8c 87       	std	Y+12, r24	; 0x0c
	SYNC(self->gui[1], printAt, abs(self->crossing));   
     7f2:	ac 01       	movw	r20, r24
     7f4:	99 23       	and	r25, r25
     7f6:	24 f4       	brge	.+8      	; 0x800 <hasCrossed+0x26>
     7f8:	44 27       	eor	r20, r20
     7fa:	55 27       	eor	r21, r21
     7fc:	48 1b       	sub	r20, r24
     7fe:	59 0b       	sbc	r21, r25
     800:	65 ea       	ldi	r22, 0xA5	; 165
     802:	70 e0       	ldi	r23, 0x00	; 0
     804:	88 89       	ldd	r24, Y+16	; 0x10
     806:	99 89       	ldd	r25, Y+17	; 0x11
     808:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <sync>
    if (self->crossing == 0) {
     80c:	8c 85       	ldd	r24, Y+12	; 0x0c
     80e:	9d 85       	ldd	r25, Y+13	; 0x0d
     810:	89 2b       	or	r24, r25
     812:	71 f5       	brne	.+92     	; 0x870 <hasCrossed+0x96>
        switch (dir) {
     814:	0f 3f       	cpi	r16, 0xFF	; 255
     816:	8f ef       	ldi	r24, 0xFF	; 255
     818:	18 07       	cpc	r17, r24
     81a:	b9 f0       	breq	.+46     	; 0x84a <hasCrossed+0x70>
     81c:	01 30       	cpi	r16, 0x01	; 1
     81e:	11 05       	cpc	r17, r1
     820:	39 f5       	brne	.+78     	; 0x870 <hasCrossed+0x96>
            case 1:
                changeLights(self, 0, 1);
     822:	41 e0       	ldi	r20, 0x01	; 1
     824:	50 e0       	ldi	r21, 0x00	; 0
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	70 e0       	ldi	r23, 0x00	; 0
     82a:	ce 01       	movw	r24, r28
     82c:	0e 94 77 02 	call	0x4ee	; 0x4ee <changeLights>
                if (self->southQueue > 0) {
     830:	8e 81       	ldd	r24, Y+6	; 0x06
     832:	9f 81       	ldd	r25, Y+7	; 0x07
     834:	18 16       	cp	r1, r24
     836:	19 06       	cpc	r1, r25
     838:	dc f4       	brge	.+54     	; 0x870 <hasCrossed+0x96>
                    changeLights(self, 1, -1);
     83a:	4f ef       	ldi	r20, 0xFF	; 255
     83c:	5f ef       	ldi	r21, 0xFF	; 255
     83e:	61 e0       	ldi	r22, 0x01	; 1
     840:	70 e0       	ldi	r23, 0x00	; 0
     842:	ce 01       	movw	r24, r28
     844:	0e 94 77 02 	call	0x4ee	; 0x4ee <changeLights>
     848:	13 c0       	rjmp	.+38     	; 0x870 <hasCrossed+0x96>
                }
                break;
            case -1:
                changeLights(self, 0, -1);
     84a:	4f ef       	ldi	r20, 0xFF	; 255
     84c:	5f ef       	ldi	r21, 0xFF	; 255
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	70 e0       	ldi	r23, 0x00	; 0
     852:	ce 01       	movw	r24, r28
     854:	0e 94 77 02 	call	0x4ee	; 0x4ee <changeLights>
                if (self->northQueue > 0) {
     858:	8c 81       	ldd	r24, Y+4	; 0x04
     85a:	9d 81       	ldd	r25, Y+5	; 0x05
     85c:	18 16       	cp	r1, r24
     85e:	19 06       	cpc	r1, r25
     860:	3c f4       	brge	.+14     	; 0x870 <hasCrossed+0x96>
                    changeLights(self, 1, 1);
     862:	41 e0       	ldi	r20, 0x01	; 1
     864:	50 e0       	ldi	r21, 0x00	; 0
     866:	61 e0       	ldi	r22, 0x01	; 1
     868:	70 e0       	ldi	r23, 0x00	; 0
     86a:	ce 01       	movw	r24, r28
     86c:	0e 94 77 02 	call	0x4ee	; 0x4ee <changeLights>
                }
                break;
        }
    }

}
     870:	df 91       	pop	r29
     872:	cf 91       	pop	r28
     874:	1f 91       	pop	r17
     876:	0f 91       	pop	r16
     878:	08 95       	ret

0000087a <remove>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     87a:	fb 01       	movw	r30, r22
     87c:	a0 81       	ld	r26, Z
     87e:	b1 81       	ldd	r27, Z+1	; 0x01
     880:	10 97       	sbiw	r26, 0x00	; 0
     882:	f1 f0       	breq	.+60     	; 0x8c0 <remove+0x46>
     884:	a8 17       	cp	r26, r24
     886:	b9 07       	cpc	r27, r25
     888:	11 f4       	brne	.+4      	; 0x88e <remove+0x14>
     88a:	11 c0       	rjmp	.+34     	; 0x8ae <remove+0x34>
     88c:	df 01       	movw	r26, r30
     88e:	ed 91       	ld	r30, X+
     890:	fc 91       	ld	r31, X
     892:	11 97       	sbiw	r26, 0x01	; 1
     894:	30 97       	sbiw	r30, 0x00	; 0
     896:	b9 f0       	breq	.+46     	; 0x8c6 <remove+0x4c>
     898:	8e 17       	cp	r24, r30
     89a:	9f 07       	cpc	r25, r31
     89c:	b9 f7       	brne	.-18     	; 0x88c <remove+0x12>
     89e:	16 c0       	rjmp	.+44     	; 0x8cc <remove+0x52>
     8a0:	80 81       	ld	r24, Z
     8a2:	91 81       	ldd	r25, Z+1	; 0x01
     8a4:	8d 93       	st	X+, r24
     8a6:	9c 93       	st	X, r25
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	08 95       	ret
     8ae:	fd 01       	movw	r30, r26
     8b0:	80 81       	ld	r24, Z
     8b2:	91 81       	ldd	r25, Z+1	; 0x01
     8b4:	fb 01       	movw	r30, r22
     8b6:	91 83       	std	Z+1, r25	; 0x01
     8b8:	80 83       	st	Z, r24
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	08 95       	ret
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	08 95       	ret
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	08 95       	ret
     8cc:	10 97       	sbiw	r26, 0x00	; 0
     8ce:	41 f7       	brne	.-48     	; 0x8a0 <remove+0x26>
     8d0:	ef cf       	rjmp	.-34     	; 0x8b0 <remove+0x36>

000008d2 <initialize>:
     8d2:	cf 93       	push	r28
     8d4:	df 93       	push	r29
     8d6:	00 d0       	rcall	.+0      	; 0x8d8 <initialize+0x6>
     8d8:	00 d0       	rcall	.+0      	; 0x8da <initialize+0x8>
     8da:	cd b7       	in	r28, 0x3d	; 61
     8dc:	de b7       	in	r29, 0x3e	; 62
     8de:	85 e6       	ldi	r24, 0x65	; 101
     8e0:	92 e0       	ldi	r25, 0x02	; 2
     8e2:	25 e4       	ldi	r18, 0x45	; 69
     8e4:	33 e0       	ldi	r19, 0x03	; 3
     8e6:	fc 01       	movw	r30, r24
     8e8:	70 97       	sbiw	r30, 0x10	; 16
     8ea:	91 83       	std	Z+1, r25	; 0x01
     8ec:	80 83       	st	Z, r24
     8ee:	40 96       	adiw	r24, 0x10	; 16
     8f0:	82 17       	cp	r24, r18
     8f2:	93 07       	cpc	r25, r19
     8f4:	c1 f7       	brne	.-16     	; 0x8e6 <initialize+0x14>
     8f6:	10 92 36 03 	sts	0x0336, r1	; 0x800336 <messages+0xe1>
     8fa:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <messages+0xe0>
     8fe:	e0 ea       	ldi	r30, 0xA0	; 160
     900:	f1 e0       	ldi	r31, 0x01	; 1
     902:	8d eb       	ldi	r24, 0xBD	; 189
     904:	91 e0       	ldi	r25, 0x01	; 1
     906:	91 83       	std	Z+1, r25	; 0x01
     908:	80 83       	st	Z, r24
     90a:	8a ed       	ldi	r24, 0xDA	; 218
     90c:	91 e0       	ldi	r25, 0x01	; 1
     90e:	96 8f       	std	Z+30, r25	; 0x1e
     910:	85 8f       	std	Z+29, r24	; 0x1d
     912:	a7 ef       	ldi	r26, 0xF7	; 247
     914:	b1 e0       	ldi	r27, 0x01	; 1
     916:	b3 af       	std	Z+59, r27	; 0x3b
     918:	a2 af       	std	Z+58, r26	; 0x3a
     91a:	1d 92       	st	X+, r1
     91c:	1c 92       	st	X, r1
     91e:	fa 83       	std	Y+2, r31	; 0x02
     920:	e9 83       	std	Y+1, r30	; 0x01
     922:	e1 ea       	ldi	r30, 0xA1	; 161
     924:	f3 e0       	ldi	r31, 0x03	; 3
     926:	fc 83       	std	Y+4, r31	; 0x04
     928:	eb 83       	std	Y+3, r30	; 0x03
     92a:	89 81       	ldd	r24, Y+1	; 0x01
     92c:	9a 81       	ldd	r25, Y+2	; 0x02
     92e:	06 96       	adiw	r24, 0x06	; 6
     930:	0e 94 ab 11 	call	0x2356	; 0x2356 <setjmp>
     934:	8b 81       	ldd	r24, Y+3	; 0x03
     936:	9c 81       	ldd	r25, Y+4	; 0x04
     938:	e9 81       	ldd	r30, Y+1	; 0x01
     93a:	fa 81       	ldd	r31, Y+2	; 0x02
     93c:	97 8b       	std	Z+23, r25	; 0x17
     93e:	86 8b       	std	Z+22, r24	; 0x16
     940:	91 8f       	std	Z+25, r25	; 0x19
     942:	80 8f       	std	Z+24, r24	; 0x18
     944:	8a e1       	ldi	r24, 0x1A	; 26
     946:	90 e1       	ldi	r25, 0x10	; 16
     948:	94 8f       	std	Z+28, r25	; 0x1c
     94a:	83 8f       	std	Z+27, r24	; 0x1b
     94c:	15 82       	std	Z+5, r1	; 0x05
     94e:	14 82       	std	Z+4, r1	; 0x04
     950:	7d 96       	adiw	r30, 0x1d	; 29
     952:	fa 83       	std	Y+2, r31	; 0x02
     954:	e9 83       	std	Y+1, r30	; 0x01
     956:	eb 81       	ldd	r30, Y+3	; 0x03
     958:	fc 81       	ldd	r31, Y+4	; 0x04
     95a:	e0 5a       	subi	r30, 0xA0	; 160
     95c:	ff 4f       	sbci	r31, 0xFF	; 255
     95e:	fc 83       	std	Y+4, r31	; 0x04
     960:	eb 83       	std	Y+3, r30	; 0x03
     962:	89 81       	ldd	r24, Y+1	; 0x01
     964:	9a 81       	ldd	r25, Y+2	; 0x02
     966:	84 51       	subi	r24, 0x14	; 20
     968:	92 40       	sbci	r25, 0x02	; 2
     96a:	f9 f6       	brne	.-66     	; 0x92a <initialize+0x58>
     96c:	e8 e3       	ldi	r30, 0x38	; 56
     96e:	f2 e0       	ldi	r31, 0x02	; 2
     970:	11 82       	std	Z+1, r1	; 0x01
     972:	10 82       	st	Z, r1
     974:	15 82       	std	Z+5, r1	; 0x05
     976:	14 82       	std	Z+4, r1	; 0x04
     978:	13 82       	std	Z+3, r1	; 0x03
     97a:	12 82       	std	Z+2, r1	; 0x02
     97c:	e1 e6       	ldi	r30, 0x61	; 97
     97e:	f0 e0       	ldi	r31, 0x00	; 0
     980:	80 e8       	ldi	r24, 0x80	; 128
     982:	80 83       	st	Z, r24
     984:	10 82       	st	Z, r1
     986:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     98a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     98e:	84 e0       	ldi	r24, 0x04	; 4
     990:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     994:	81 e0       	ldi	r24, 0x01	; 1
     996:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     99a:	0f 90       	pop	r0
     99c:	0f 90       	pop	r0
     99e:	0f 90       	pop	r0
     9a0:	0f 90       	pop	r0
     9a2:	df 91       	pop	r29
     9a4:	cf 91       	pop	r28
     9a6:	08 95       	ret

000009a8 <dispatch>:
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
     9ac:	00 d0       	rcall	.+0      	; 0x9ae <dispatch+0x6>
     9ae:	cd b7       	in	r28, 0x3d	; 61
     9b0:	de b7       	in	r29, 0x3e	; 62
     9b2:	9a 83       	std	Y+2, r25	; 0x02
     9b4:	89 83       	std	Y+1, r24	; 0x01
     9b6:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <current>
     9ba:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <current+0x1>
     9be:	06 96       	adiw	r24, 0x06	; 6
     9c0:	0e 94 ab 11 	call	0x2356	; 0x2356 <setjmp>
     9c4:	89 2b       	or	r24, r25
     9c6:	59 f4       	brne	.+22     	; 0x9de <dispatch+0x36>
     9c8:	89 81       	ldd	r24, Y+1	; 0x01
     9ca:	9a 81       	ldd	r25, Y+2	; 0x02
     9cc:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <current+0x1>
     9d0:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <current>
     9d4:	61 e0       	ldi	r22, 0x01	; 1
     9d6:	70 e0       	ldi	r23, 0x00	; 0
     9d8:	06 96       	adiw	r24, 0x06	; 6
     9da:	0e 94 cb 11 	call	0x2396	; 0x2396 <longjmp>
     9de:	0f 90       	pop	r0
     9e0:	0f 90       	pop	r0
     9e2:	df 91       	pop	r29
     9e4:	cf 91       	pop	r28
     9e6:	08 95       	ret

000009e8 <schedule>:
     9e8:	0f 93       	push	r16
     9ea:	1f 93       	push	r17
     9ec:	cf 93       	push	r28
     9ee:	df 93       	push	r29
     9f0:	e0 91 7a 01 	lds	r30, 0x017A	; 0x80017a <msgQ>
     9f4:	f0 91 7b 01 	lds	r31, 0x017B	; 0x80017b <msgQ+0x1>
     9f8:	30 97       	sbiw	r30, 0x00	; 0
     9fa:	61 f1       	breq	.+88     	; 0xa54 <schedule+0x6c>
     9fc:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <threadPool>
     a00:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <threadPool+0x1>
     a04:	00 97       	sbiw	r24, 0x00	; 0
     a06:	31 f1       	breq	.+76     	; 0xa54 <schedule+0x6c>
     a08:	c0 91 3f 01 	lds	r28, 0x013F	; 0x80013f <activeStack>
     a0c:	d0 91 40 01 	lds	r29, 0x0140	; 0x800140 <activeStack+0x1>
     a10:	aa 81       	ldd	r26, Y+2	; 0x02
     a12:	bb 81       	ldd	r27, Y+3	; 0x03
     a14:	10 97       	sbiw	r26, 0x00	; 0
     a16:	79 f0       	breq	.+30     	; 0xa36 <schedule+0x4e>
     a18:	46 81       	ldd	r20, Z+6	; 0x06
     a1a:	57 81       	ldd	r21, Z+7	; 0x07
     a1c:	60 85       	ldd	r22, Z+8	; 0x08
     a1e:	71 85       	ldd	r23, Z+9	; 0x09
     a20:	16 96       	adiw	r26, 0x06	; 6
     a22:	0d 91       	ld	r16, X+
     a24:	1d 91       	ld	r17, X+
     a26:	2d 91       	ld	r18, X+
     a28:	3c 91       	ld	r19, X
     a2a:	19 97       	sbiw	r26, 0x09	; 9
     a2c:	40 1b       	sub	r20, r16
     a2e:	51 0b       	sbc	r21, r17
     a30:	62 0b       	sbc	r22, r18
     a32:	73 0b       	sbc	r23, r19
     a34:	7a f4       	brpl	.+30     	; 0xa54 <schedule+0x6c>
     a36:	fc 01       	movw	r30, r24
     a38:	20 81       	ld	r18, Z
     a3a:	31 81       	ldd	r19, Z+1	; 0x01
     a3c:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <threadPool+0x1>
     a40:	20 93 41 01 	sts	0x0141, r18	; 0x800141 <threadPool>
     a44:	d1 83       	std	Z+1, r29	; 0x01
     a46:	c0 83       	st	Z, r28
     a48:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <activeStack+0x1>
     a4c:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <activeStack>
     a50:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <dispatch>
     a54:	df 91       	pop	r29
     a56:	cf 91       	pop	r28
     a58:	1f 91       	pop	r17
     a5a:	0f 91       	pop	r16
     a5c:	08 95       	ret

00000a5e <__vector_1>:
     a5e:	1f 92       	push	r1
     a60:	0f 92       	push	r0
     a62:	0f b6       	in	r0, 0x3f	; 63
     a64:	0f 92       	push	r0
     a66:	11 24       	eor	r1, r1
     a68:	2f 93       	push	r18
     a6a:	3f 93       	push	r19
     a6c:	4f 93       	push	r20
     a6e:	5f 93       	push	r21
     a70:	6f 93       	push	r22
     a72:	7f 93       	push	r23
     a74:	8f 93       	push	r24
     a76:	9f 93       	push	r25
     a78:	af 93       	push	r26
     a7a:	bf 93       	push	r27
     a7c:	ef 93       	push	r30
     a7e:	ff 93       	push	r31
     a80:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <overflows>
     a84:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <overflows+0x1>
     a88:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     a8c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     a90:	c9 01       	movw	r24, r18
     a92:	03 2e       	mov	r0, r19
     a94:	00 0c       	add	r0, r0
     a96:	aa 0b       	sbc	r26, r26
     a98:	bb 0b       	sbc	r27, r27
     a9a:	dc 01       	movw	r26, r24
     a9c:	99 27       	eor	r25, r25
     a9e:	88 27       	eor	r24, r24
     aa0:	60 e0       	ldi	r22, 0x00	; 0
     aa2:	70 e0       	ldi	r23, 0x00	; 0
     aa4:	84 2b       	or	r24, r20
     aa6:	95 2b       	or	r25, r21
     aa8:	a6 2b       	or	r26, r22
     aaa:	b7 2b       	or	r27, r23
     aac:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <timestamp>
     ab0:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <timestamp+0x1>
     ab4:	a0 93 76 01 	sts	0x0176, r26	; 0x800176 <timestamp+0x2>
     ab8:	b0 93 77 01 	sts	0x0177, r27	; 0x800177 <timestamp+0x3>
     abc:	b0 9b       	sbis	0x16, 0	; 22
     abe:	1b c0       	rjmp	.+54     	; 0xaf6 <__vector_1+0x98>
     ac0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ac4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ac8:	c9 01       	movw	r24, r18
     aca:	01 96       	adiw	r24, 0x01	; 1
     acc:	09 2e       	mov	r0, r25
     ace:	00 0c       	add	r0, r0
     ad0:	aa 0b       	sbc	r26, r26
     ad2:	bb 0b       	sbc	r27, r27
     ad4:	dc 01       	movw	r26, r24
     ad6:	99 27       	eor	r25, r25
     ad8:	88 27       	eor	r24, r24
     ada:	60 e0       	ldi	r22, 0x00	; 0
     adc:	70 e0       	ldi	r23, 0x00	; 0
     ade:	84 2b       	or	r24, r20
     ae0:	95 2b       	or	r25, r21
     ae2:	a6 2b       	or	r26, r22
     ae4:	b7 2b       	or	r27, r23
     ae6:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <timestamp>
     aea:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <timestamp+0x1>
     aee:	a0 93 76 01 	sts	0x0176, r26	; 0x800176 <timestamp+0x2>
     af2:	b0 93 77 01 	sts	0x0177, r27	; 0x800177 <timestamp+0x3>
     af6:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <mtable>
     afa:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <mtable+0x1>
     afe:	30 97       	sbiw	r30, 0x00	; 0
     b00:	39 f0       	breq	.+14     	; 0xb10 <__vector_1+0xb2>
     b02:	60 e0       	ldi	r22, 0x00	; 0
     b04:	70 e0       	ldi	r23, 0x00	; 0
     b06:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <otable>
     b0a:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <otable+0x1>
     b0e:	09 95       	icall
     b10:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <schedule>
     b14:	ff 91       	pop	r31
     b16:	ef 91       	pop	r30
     b18:	bf 91       	pop	r27
     b1a:	af 91       	pop	r26
     b1c:	9f 91       	pop	r25
     b1e:	8f 91       	pop	r24
     b20:	7f 91       	pop	r23
     b22:	6f 91       	pop	r22
     b24:	5f 91       	pop	r21
     b26:	4f 91       	pop	r20
     b28:	3f 91       	pop	r19
     b2a:	2f 91       	pop	r18
     b2c:	0f 90       	pop	r0
     b2e:	0f be       	out	0x3f, r0	; 63
     b30:	0f 90       	pop	r0
     b32:	1f 90       	pop	r1
     b34:	18 95       	reti

00000b36 <__vector_2>:
     b36:	1f 92       	push	r1
     b38:	0f 92       	push	r0
     b3a:	0f b6       	in	r0, 0x3f	; 63
     b3c:	0f 92       	push	r0
     b3e:	11 24       	eor	r1, r1
     b40:	2f 93       	push	r18
     b42:	3f 93       	push	r19
     b44:	4f 93       	push	r20
     b46:	5f 93       	push	r21
     b48:	6f 93       	push	r22
     b4a:	7f 93       	push	r23
     b4c:	8f 93       	push	r24
     b4e:	9f 93       	push	r25
     b50:	af 93       	push	r26
     b52:	bf 93       	push	r27
     b54:	ef 93       	push	r30
     b56:	ff 93       	push	r31
     b58:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <overflows>
     b5c:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <overflows+0x1>
     b60:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     b64:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     b68:	c9 01       	movw	r24, r18
     b6a:	03 2e       	mov	r0, r19
     b6c:	00 0c       	add	r0, r0
     b6e:	aa 0b       	sbc	r26, r26
     b70:	bb 0b       	sbc	r27, r27
     b72:	dc 01       	movw	r26, r24
     b74:	99 27       	eor	r25, r25
     b76:	88 27       	eor	r24, r24
     b78:	60 e0       	ldi	r22, 0x00	; 0
     b7a:	70 e0       	ldi	r23, 0x00	; 0
     b7c:	84 2b       	or	r24, r20
     b7e:	95 2b       	or	r25, r21
     b80:	a6 2b       	or	r26, r22
     b82:	b7 2b       	or	r27, r23
     b84:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <timestamp>
     b88:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <timestamp+0x1>
     b8c:	a0 93 76 01 	sts	0x0176, r26	; 0x800176 <timestamp+0x2>
     b90:	b0 93 77 01 	sts	0x0177, r27	; 0x800177 <timestamp+0x3>
     b94:	b0 9b       	sbis	0x16, 0	; 22
     b96:	1b c0       	rjmp	.+54     	; 0xbce <__vector_2+0x98>
     b98:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     b9c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ba0:	c9 01       	movw	r24, r18
     ba2:	01 96       	adiw	r24, 0x01	; 1
     ba4:	09 2e       	mov	r0, r25
     ba6:	00 0c       	add	r0, r0
     ba8:	aa 0b       	sbc	r26, r26
     baa:	bb 0b       	sbc	r27, r27
     bac:	dc 01       	movw	r26, r24
     bae:	99 27       	eor	r25, r25
     bb0:	88 27       	eor	r24, r24
     bb2:	60 e0       	ldi	r22, 0x00	; 0
     bb4:	70 e0       	ldi	r23, 0x00	; 0
     bb6:	84 2b       	or	r24, r20
     bb8:	95 2b       	or	r25, r21
     bba:	a6 2b       	or	r26, r22
     bbc:	b7 2b       	or	r27, r23
     bbe:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <timestamp>
     bc2:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <timestamp+0x1>
     bc6:	a0 93 76 01 	sts	0x0176, r26	; 0x800176 <timestamp+0x2>
     bca:	b0 93 77 01 	sts	0x0177, r27	; 0x800177 <timestamp+0x3>
     bce:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <mtable+0x2>
     bd2:	f0 91 17 02 	lds	r31, 0x0217	; 0x800217 <mtable+0x3>
     bd6:	30 97       	sbiw	r30, 0x00	; 0
     bd8:	39 f0       	breq	.+14     	; 0xbe8 <__vector_2+0xb2>
     bda:	61 e0       	ldi	r22, 0x01	; 1
     bdc:	70 e0       	ldi	r23, 0x00	; 0
     bde:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <otable+0x2>
     be2:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <otable+0x3>
     be6:	09 95       	icall
     be8:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <schedule>
     bec:	ff 91       	pop	r31
     bee:	ef 91       	pop	r30
     bf0:	bf 91       	pop	r27
     bf2:	af 91       	pop	r26
     bf4:	9f 91       	pop	r25
     bf6:	8f 91       	pop	r24
     bf8:	7f 91       	pop	r23
     bfa:	6f 91       	pop	r22
     bfc:	5f 91       	pop	r21
     bfe:	4f 91       	pop	r20
     c00:	3f 91       	pop	r19
     c02:	2f 91       	pop	r18
     c04:	0f 90       	pop	r0
     c06:	0f be       	out	0x3f, r0	; 63
     c08:	0f 90       	pop	r0
     c0a:	1f 90       	pop	r1
     c0c:	18 95       	reti

00000c0e <__vector_3>:
     c0e:	1f 92       	push	r1
     c10:	0f 92       	push	r0
     c12:	0f b6       	in	r0, 0x3f	; 63
     c14:	0f 92       	push	r0
     c16:	11 24       	eor	r1, r1
     c18:	2f 93       	push	r18
     c1a:	3f 93       	push	r19
     c1c:	4f 93       	push	r20
     c1e:	5f 93       	push	r21
     c20:	6f 93       	push	r22
     c22:	7f 93       	push	r23
     c24:	8f 93       	push	r24
     c26:	9f 93       	push	r25
     c28:	af 93       	push	r26
     c2a:	bf 93       	push	r27
     c2c:	ef 93       	push	r30
     c2e:	ff 93       	push	r31
     c30:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <overflows>
     c34:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <overflows+0x1>
     c38:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c3c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c40:	c9 01       	movw	r24, r18
     c42:	03 2e       	mov	r0, r19
     c44:	00 0c       	add	r0, r0
     c46:	aa 0b       	sbc	r26, r26
     c48:	bb 0b       	sbc	r27, r27
     c4a:	dc 01       	movw	r26, r24
     c4c:	99 27       	eor	r25, r25
     c4e:	88 27       	eor	r24, r24
     c50:	60 e0       	ldi	r22, 0x00	; 0
     c52:	70 e0       	ldi	r23, 0x00	; 0
     c54:	84 2b       	or	r24, r20
     c56:	95 2b       	or	r25, r21
     c58:	a6 2b       	or	r26, r22
     c5a:	b7 2b       	or	r27, r23
     c5c:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <timestamp>
     c60:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <timestamp+0x1>
     c64:	a0 93 76 01 	sts	0x0176, r26	; 0x800176 <timestamp+0x2>
     c68:	b0 93 77 01 	sts	0x0177, r27	; 0x800177 <timestamp+0x3>
     c6c:	b0 9b       	sbis	0x16, 0	; 22
     c6e:	1b c0       	rjmp	.+54     	; 0xca6 <__vector_3+0x98>
     c70:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c74:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c78:	c9 01       	movw	r24, r18
     c7a:	01 96       	adiw	r24, 0x01	; 1
     c7c:	09 2e       	mov	r0, r25
     c7e:	00 0c       	add	r0, r0
     c80:	aa 0b       	sbc	r26, r26
     c82:	bb 0b       	sbc	r27, r27
     c84:	dc 01       	movw	r26, r24
     c86:	99 27       	eor	r25, r25
     c88:	88 27       	eor	r24, r24
     c8a:	60 e0       	ldi	r22, 0x00	; 0
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	84 2b       	or	r24, r20
     c90:	95 2b       	or	r25, r21
     c92:	a6 2b       	or	r26, r22
     c94:	b7 2b       	or	r27, r23
     c96:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <timestamp>
     c9a:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <timestamp+0x1>
     c9e:	a0 93 76 01 	sts	0x0176, r26	; 0x800176 <timestamp+0x2>
     ca2:	b0 93 77 01 	sts	0x0177, r27	; 0x800177 <timestamp+0x3>
     ca6:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <mtable+0x4>
     caa:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <mtable+0x5>
     cae:	30 97       	sbiw	r30, 0x00	; 0
     cb0:	39 f0       	breq	.+14     	; 0xcc0 <__vector_3+0xb2>
     cb2:	62 e0       	ldi	r22, 0x02	; 2
     cb4:	70 e0       	ldi	r23, 0x00	; 0
     cb6:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <otable+0x4>
     cba:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <otable+0x5>
     cbe:	09 95       	icall
     cc0:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <schedule>
     cc4:	ff 91       	pop	r31
     cc6:	ef 91       	pop	r30
     cc8:	bf 91       	pop	r27
     cca:	af 91       	pop	r26
     ccc:	9f 91       	pop	r25
     cce:	8f 91       	pop	r24
     cd0:	7f 91       	pop	r23
     cd2:	6f 91       	pop	r22
     cd4:	5f 91       	pop	r21
     cd6:	4f 91       	pop	r20
     cd8:	3f 91       	pop	r19
     cda:	2f 91       	pop	r18
     cdc:	0f 90       	pop	r0
     cde:	0f be       	out	0x3f, r0	; 63
     ce0:	0f 90       	pop	r0
     ce2:	1f 90       	pop	r1
     ce4:	18 95       	reti

00000ce6 <__vector_4>:
     ce6:	1f 92       	push	r1
     ce8:	0f 92       	push	r0
     cea:	0f b6       	in	r0, 0x3f	; 63
     cec:	0f 92       	push	r0
     cee:	11 24       	eor	r1, r1
     cf0:	2f 93       	push	r18
     cf2:	3f 93       	push	r19
     cf4:	4f 93       	push	r20
     cf6:	5f 93       	push	r21
     cf8:	6f 93       	push	r22
     cfa:	7f 93       	push	r23
     cfc:	8f 93       	push	r24
     cfe:	9f 93       	push	r25
     d00:	af 93       	push	r26
     d02:	bf 93       	push	r27
     d04:	ef 93       	push	r30
     d06:	ff 93       	push	r31
     d08:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <overflows>
     d0c:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <overflows+0x1>
     d10:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d14:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d18:	c9 01       	movw	r24, r18
     d1a:	03 2e       	mov	r0, r19
     d1c:	00 0c       	add	r0, r0
     d1e:	aa 0b       	sbc	r26, r26
     d20:	bb 0b       	sbc	r27, r27
     d22:	dc 01       	movw	r26, r24
     d24:	99 27       	eor	r25, r25
     d26:	88 27       	eor	r24, r24
     d28:	60 e0       	ldi	r22, 0x00	; 0
     d2a:	70 e0       	ldi	r23, 0x00	; 0
     d2c:	84 2b       	or	r24, r20
     d2e:	95 2b       	or	r25, r21
     d30:	a6 2b       	or	r26, r22
     d32:	b7 2b       	or	r27, r23
     d34:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <timestamp>
     d38:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <timestamp+0x1>
     d3c:	a0 93 76 01 	sts	0x0176, r26	; 0x800176 <timestamp+0x2>
     d40:	b0 93 77 01 	sts	0x0177, r27	; 0x800177 <timestamp+0x3>
     d44:	b0 9b       	sbis	0x16, 0	; 22
     d46:	1b c0       	rjmp	.+54     	; 0xd7e <__vector_4+0x98>
     d48:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d4c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d50:	c9 01       	movw	r24, r18
     d52:	01 96       	adiw	r24, 0x01	; 1
     d54:	09 2e       	mov	r0, r25
     d56:	00 0c       	add	r0, r0
     d58:	aa 0b       	sbc	r26, r26
     d5a:	bb 0b       	sbc	r27, r27
     d5c:	dc 01       	movw	r26, r24
     d5e:	99 27       	eor	r25, r25
     d60:	88 27       	eor	r24, r24
     d62:	60 e0       	ldi	r22, 0x00	; 0
     d64:	70 e0       	ldi	r23, 0x00	; 0
     d66:	84 2b       	or	r24, r20
     d68:	95 2b       	or	r25, r21
     d6a:	a6 2b       	or	r26, r22
     d6c:	b7 2b       	or	r27, r23
     d6e:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <timestamp>
     d72:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <timestamp+0x1>
     d76:	a0 93 76 01 	sts	0x0176, r26	; 0x800176 <timestamp+0x2>
     d7a:	b0 93 77 01 	sts	0x0177, r27	; 0x800177 <timestamp+0x3>
     d7e:	e0 91 1a 02 	lds	r30, 0x021A	; 0x80021a <mtable+0x6>
     d82:	f0 91 1b 02 	lds	r31, 0x021B	; 0x80021b <mtable+0x7>
     d86:	30 97       	sbiw	r30, 0x00	; 0
     d88:	39 f0       	breq	.+14     	; 0xd98 <__vector_4+0xb2>
     d8a:	63 e0       	ldi	r22, 0x03	; 3
     d8c:	70 e0       	ldi	r23, 0x00	; 0
     d8e:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <otable+0x6>
     d92:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <otable+0x7>
     d96:	09 95       	icall
     d98:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <schedule>
     d9c:	ff 91       	pop	r31
     d9e:	ef 91       	pop	r30
     da0:	bf 91       	pop	r27
     da2:	af 91       	pop	r26
     da4:	9f 91       	pop	r25
     da6:	8f 91       	pop	r24
     da8:	7f 91       	pop	r23
     daa:	6f 91       	pop	r22
     dac:	5f 91       	pop	r21
     dae:	4f 91       	pop	r20
     db0:	3f 91       	pop	r19
     db2:	2f 91       	pop	r18
     db4:	0f 90       	pop	r0
     db6:	0f be       	out	0x3f, r0	; 63
     db8:	0f 90       	pop	r0
     dba:	1f 90       	pop	r1
     dbc:	18 95       	reti

00000dbe <__vector_5>:
     dbe:	1f 92       	push	r1
     dc0:	0f 92       	push	r0
     dc2:	0f b6       	in	r0, 0x3f	; 63
     dc4:	0f 92       	push	r0
     dc6:	11 24       	eor	r1, r1
     dc8:	2f 93       	push	r18
     dca:	3f 93       	push	r19
     dcc:	4f 93       	push	r20
     dce:	5f 93       	push	r21
     dd0:	6f 93       	push	r22
     dd2:	7f 93       	push	r23
     dd4:	8f 93       	push	r24
     dd6:	9f 93       	push	r25
     dd8:	af 93       	push	r26
     dda:	bf 93       	push	r27
     ddc:	ef 93       	push	r30
     dde:	ff 93       	push	r31
     de0:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <overflows>
     de4:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <overflows+0x1>
     de8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     dec:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     df0:	c9 01       	movw	r24, r18
     df2:	03 2e       	mov	r0, r19
     df4:	00 0c       	add	r0, r0
     df6:	aa 0b       	sbc	r26, r26
     df8:	bb 0b       	sbc	r27, r27
     dfa:	dc 01       	movw	r26, r24
     dfc:	99 27       	eor	r25, r25
     dfe:	88 27       	eor	r24, r24
     e00:	60 e0       	ldi	r22, 0x00	; 0
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	84 2b       	or	r24, r20
     e06:	95 2b       	or	r25, r21
     e08:	a6 2b       	or	r26, r22
     e0a:	b7 2b       	or	r27, r23
     e0c:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <timestamp>
     e10:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <timestamp+0x1>
     e14:	a0 93 76 01 	sts	0x0176, r26	; 0x800176 <timestamp+0x2>
     e18:	b0 93 77 01 	sts	0x0177, r27	; 0x800177 <timestamp+0x3>
     e1c:	b0 9b       	sbis	0x16, 0	; 22
     e1e:	1b c0       	rjmp	.+54     	; 0xe56 <__vector_5+0x98>
     e20:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e24:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e28:	c9 01       	movw	r24, r18
     e2a:	01 96       	adiw	r24, 0x01	; 1
     e2c:	09 2e       	mov	r0, r25
     e2e:	00 0c       	add	r0, r0
     e30:	aa 0b       	sbc	r26, r26
     e32:	bb 0b       	sbc	r27, r27
     e34:	dc 01       	movw	r26, r24
     e36:	99 27       	eor	r25, r25
     e38:	88 27       	eor	r24, r24
     e3a:	60 e0       	ldi	r22, 0x00	; 0
     e3c:	70 e0       	ldi	r23, 0x00	; 0
     e3e:	84 2b       	or	r24, r20
     e40:	95 2b       	or	r25, r21
     e42:	a6 2b       	or	r26, r22
     e44:	b7 2b       	or	r27, r23
     e46:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <timestamp>
     e4a:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <timestamp+0x1>
     e4e:	a0 93 76 01 	sts	0x0176, r26	; 0x800176 <timestamp+0x2>
     e52:	b0 93 77 01 	sts	0x0177, r27	; 0x800177 <timestamp+0x3>
     e56:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <mtable+0x8>
     e5a:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <mtable+0x9>
     e5e:	30 97       	sbiw	r30, 0x00	; 0
     e60:	39 f0       	breq	.+14     	; 0xe70 <__vector_5+0xb2>
     e62:	64 e0       	ldi	r22, 0x04	; 4
     e64:	70 e0       	ldi	r23, 0x00	; 0
     e66:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <otable+0x8>
     e6a:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <otable+0x9>
     e6e:	09 95       	icall
     e70:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <schedule>
     e74:	ff 91       	pop	r31
     e76:	ef 91       	pop	r30
     e78:	bf 91       	pop	r27
     e7a:	af 91       	pop	r26
     e7c:	9f 91       	pop	r25
     e7e:	8f 91       	pop	r24
     e80:	7f 91       	pop	r23
     e82:	6f 91       	pop	r22
     e84:	5f 91       	pop	r21
     e86:	4f 91       	pop	r20
     e88:	3f 91       	pop	r19
     e8a:	2f 91       	pop	r18
     e8c:	0f 90       	pop	r0
     e8e:	0f be       	out	0x3f, r0	; 63
     e90:	0f 90       	pop	r0
     e92:	1f 90       	pop	r1
     e94:	18 95       	reti

00000e96 <__vector_10>:
     e96:	1f 92       	push	r1
     e98:	0f 92       	push	r0
     e9a:	0f b6       	in	r0, 0x3f	; 63
     e9c:	0f 92       	push	r0
     e9e:	11 24       	eor	r1, r1
     ea0:	2f 93       	push	r18
     ea2:	3f 93       	push	r19
     ea4:	4f 93       	push	r20
     ea6:	5f 93       	push	r21
     ea8:	6f 93       	push	r22
     eaa:	7f 93       	push	r23
     eac:	8f 93       	push	r24
     eae:	9f 93       	push	r25
     eb0:	af 93       	push	r26
     eb2:	bf 93       	push	r27
     eb4:	ef 93       	push	r30
     eb6:	ff 93       	push	r31
     eb8:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <overflows>
     ebc:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <overflows+0x1>
     ec0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ec4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ec8:	c9 01       	movw	r24, r18
     eca:	03 2e       	mov	r0, r19
     ecc:	00 0c       	add	r0, r0
     ece:	aa 0b       	sbc	r26, r26
     ed0:	bb 0b       	sbc	r27, r27
     ed2:	dc 01       	movw	r26, r24
     ed4:	99 27       	eor	r25, r25
     ed6:	88 27       	eor	r24, r24
     ed8:	60 e0       	ldi	r22, 0x00	; 0
     eda:	70 e0       	ldi	r23, 0x00	; 0
     edc:	84 2b       	or	r24, r20
     ede:	95 2b       	or	r25, r21
     ee0:	a6 2b       	or	r26, r22
     ee2:	b7 2b       	or	r27, r23
     ee4:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <timestamp>
     ee8:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <timestamp+0x1>
     eec:	a0 93 76 01 	sts	0x0176, r26	; 0x800176 <timestamp+0x2>
     ef0:	b0 93 77 01 	sts	0x0177, r27	; 0x800177 <timestamp+0x3>
     ef4:	b0 9b       	sbis	0x16, 0	; 22
     ef6:	1b c0       	rjmp	.+54     	; 0xf2e <__vector_10+0x98>
     ef8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     efc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f00:	c9 01       	movw	r24, r18
     f02:	01 96       	adiw	r24, 0x01	; 1
     f04:	09 2e       	mov	r0, r25
     f06:	00 0c       	add	r0, r0
     f08:	aa 0b       	sbc	r26, r26
     f0a:	bb 0b       	sbc	r27, r27
     f0c:	dc 01       	movw	r26, r24
     f0e:	99 27       	eor	r25, r25
     f10:	88 27       	eor	r24, r24
     f12:	60 e0       	ldi	r22, 0x00	; 0
     f14:	70 e0       	ldi	r23, 0x00	; 0
     f16:	84 2b       	or	r24, r20
     f18:	95 2b       	or	r25, r21
     f1a:	a6 2b       	or	r26, r22
     f1c:	b7 2b       	or	r27, r23
     f1e:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <timestamp>
     f22:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <timestamp+0x1>
     f26:	a0 93 76 01 	sts	0x0176, r26	; 0x800176 <timestamp+0x2>
     f2a:	b0 93 77 01 	sts	0x0177, r27	; 0x800177 <timestamp+0x3>
     f2e:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <mtable+0xa>
     f32:	f0 91 1f 02 	lds	r31, 0x021F	; 0x80021f <mtable+0xb>
     f36:	30 97       	sbiw	r30, 0x00	; 0
     f38:	39 f0       	breq	.+14     	; 0xf48 <__vector_10+0xb2>
     f3a:	65 e0       	ldi	r22, 0x05	; 5
     f3c:	70 e0       	ldi	r23, 0x00	; 0
     f3e:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <otable+0xa>
     f42:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <otable+0xb>
     f46:	09 95       	icall
     f48:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <schedule>
     f4c:	ff 91       	pop	r31
     f4e:	ef 91       	pop	r30
     f50:	bf 91       	pop	r27
     f52:	af 91       	pop	r26
     f54:	9f 91       	pop	r25
     f56:	8f 91       	pop	r24
     f58:	7f 91       	pop	r23
     f5a:	6f 91       	pop	r22
     f5c:	5f 91       	pop	r21
     f5e:	4f 91       	pop	r20
     f60:	3f 91       	pop	r19
     f62:	2f 91       	pop	r18
     f64:	0f 90       	pop	r0
     f66:	0f be       	out	0x3f, r0	; 63
     f68:	0f 90       	pop	r0
     f6a:	1f 90       	pop	r1
     f6c:	18 95       	reti

00000f6e <__vector_11>:
     f6e:	1f 92       	push	r1
     f70:	0f 92       	push	r0
     f72:	0f b6       	in	r0, 0x3f	; 63
     f74:	0f 92       	push	r0
     f76:	11 24       	eor	r1, r1
     f78:	2f 93       	push	r18
     f7a:	3f 93       	push	r19
     f7c:	4f 93       	push	r20
     f7e:	5f 93       	push	r21
     f80:	6f 93       	push	r22
     f82:	7f 93       	push	r23
     f84:	8f 93       	push	r24
     f86:	9f 93       	push	r25
     f88:	af 93       	push	r26
     f8a:	bf 93       	push	r27
     f8c:	ef 93       	push	r30
     f8e:	ff 93       	push	r31
     f90:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <overflows>
     f94:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <overflows+0x1>
     f98:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f9c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     fa0:	c9 01       	movw	r24, r18
     fa2:	03 2e       	mov	r0, r19
     fa4:	00 0c       	add	r0, r0
     fa6:	aa 0b       	sbc	r26, r26
     fa8:	bb 0b       	sbc	r27, r27
     faa:	dc 01       	movw	r26, r24
     fac:	99 27       	eor	r25, r25
     fae:	88 27       	eor	r24, r24
     fb0:	60 e0       	ldi	r22, 0x00	; 0
     fb2:	70 e0       	ldi	r23, 0x00	; 0
     fb4:	84 2b       	or	r24, r20
     fb6:	95 2b       	or	r25, r21
     fb8:	a6 2b       	or	r26, r22
     fba:	b7 2b       	or	r27, r23
     fbc:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <timestamp>
     fc0:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <timestamp+0x1>
     fc4:	a0 93 76 01 	sts	0x0176, r26	; 0x800176 <timestamp+0x2>
     fc8:	b0 93 77 01 	sts	0x0177, r27	; 0x800177 <timestamp+0x3>
     fcc:	b0 9b       	sbis	0x16, 0	; 22
     fce:	1b c0       	rjmp	.+54     	; 0x1006 <__vector_11+0x98>
     fd0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     fd4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     fd8:	c9 01       	movw	r24, r18
     fda:	01 96       	adiw	r24, 0x01	; 1
     fdc:	09 2e       	mov	r0, r25
     fde:	00 0c       	add	r0, r0
     fe0:	aa 0b       	sbc	r26, r26
     fe2:	bb 0b       	sbc	r27, r27
     fe4:	dc 01       	movw	r26, r24
     fe6:	99 27       	eor	r25, r25
     fe8:	88 27       	eor	r24, r24
     fea:	60 e0       	ldi	r22, 0x00	; 0
     fec:	70 e0       	ldi	r23, 0x00	; 0
     fee:	84 2b       	or	r24, r20
     ff0:	95 2b       	or	r25, r21
     ff2:	a6 2b       	or	r26, r22
     ff4:	b7 2b       	or	r27, r23
     ff6:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <timestamp>
     ffa:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <timestamp+0x1>
     ffe:	a0 93 76 01 	sts	0x0176, r26	; 0x800176 <timestamp+0x2>
    1002:	b0 93 77 01 	sts	0x0177, r27	; 0x800177 <timestamp+0x3>
    1006:	e0 91 20 02 	lds	r30, 0x0220	; 0x800220 <mtable+0xc>
    100a:	f0 91 21 02 	lds	r31, 0x0221	; 0x800221 <mtable+0xd>
    100e:	30 97       	sbiw	r30, 0x00	; 0
    1010:	39 f0       	breq	.+14     	; 0x1020 <__vector_11+0xb2>
    1012:	66 e0       	ldi	r22, 0x06	; 6
    1014:	70 e0       	ldi	r23, 0x00	; 0
    1016:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <otable+0xc>
    101a:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <otable+0xd>
    101e:	09 95       	icall
    1020:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <schedule>
    1024:	ff 91       	pop	r31
    1026:	ef 91       	pop	r30
    1028:	bf 91       	pop	r27
    102a:	af 91       	pop	r26
    102c:	9f 91       	pop	r25
    102e:	8f 91       	pop	r24
    1030:	7f 91       	pop	r23
    1032:	6f 91       	pop	r22
    1034:	5f 91       	pop	r21
    1036:	4f 91       	pop	r20
    1038:	3f 91       	pop	r19
    103a:	2f 91       	pop	r18
    103c:	0f 90       	pop	r0
    103e:	0f be       	out	0x3f, r0	; 63
    1040:	0f 90       	pop	r0
    1042:	1f 90       	pop	r1
    1044:	18 95       	reti

00001046 <__vector_12>:
    1046:	1f 92       	push	r1
    1048:	0f 92       	push	r0
    104a:	0f b6       	in	r0, 0x3f	; 63
    104c:	0f 92       	push	r0
    104e:	11 24       	eor	r1, r1
    1050:	2f 93       	push	r18
    1052:	3f 93       	push	r19
    1054:	4f 93       	push	r20
    1056:	5f 93       	push	r21
    1058:	6f 93       	push	r22
    105a:	7f 93       	push	r23
    105c:	8f 93       	push	r24
    105e:	9f 93       	push	r25
    1060:	af 93       	push	r26
    1062:	bf 93       	push	r27
    1064:	ef 93       	push	r30
    1066:	ff 93       	push	r31
    1068:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <overflows>
    106c:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <overflows+0x1>
    1070:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1074:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1078:	c9 01       	movw	r24, r18
    107a:	03 2e       	mov	r0, r19
    107c:	00 0c       	add	r0, r0
    107e:	aa 0b       	sbc	r26, r26
    1080:	bb 0b       	sbc	r27, r27
    1082:	dc 01       	movw	r26, r24
    1084:	99 27       	eor	r25, r25
    1086:	88 27       	eor	r24, r24
    1088:	60 e0       	ldi	r22, 0x00	; 0
    108a:	70 e0       	ldi	r23, 0x00	; 0
    108c:	84 2b       	or	r24, r20
    108e:	95 2b       	or	r25, r21
    1090:	a6 2b       	or	r26, r22
    1092:	b7 2b       	or	r27, r23
    1094:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <timestamp>
    1098:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <timestamp+0x1>
    109c:	a0 93 76 01 	sts	0x0176, r26	; 0x800176 <timestamp+0x2>
    10a0:	b0 93 77 01 	sts	0x0177, r27	; 0x800177 <timestamp+0x3>
    10a4:	b0 9b       	sbis	0x16, 0	; 22
    10a6:	1b c0       	rjmp	.+54     	; 0x10de <__vector_12+0x98>
    10a8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    10ac:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    10b0:	c9 01       	movw	r24, r18
    10b2:	01 96       	adiw	r24, 0x01	; 1
    10b4:	09 2e       	mov	r0, r25
    10b6:	00 0c       	add	r0, r0
    10b8:	aa 0b       	sbc	r26, r26
    10ba:	bb 0b       	sbc	r27, r27
    10bc:	dc 01       	movw	r26, r24
    10be:	99 27       	eor	r25, r25
    10c0:	88 27       	eor	r24, r24
    10c2:	60 e0       	ldi	r22, 0x00	; 0
    10c4:	70 e0       	ldi	r23, 0x00	; 0
    10c6:	84 2b       	or	r24, r20
    10c8:	95 2b       	or	r25, r21
    10ca:	a6 2b       	or	r26, r22
    10cc:	b7 2b       	or	r27, r23
    10ce:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <timestamp>
    10d2:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <timestamp+0x1>
    10d6:	a0 93 76 01 	sts	0x0176, r26	; 0x800176 <timestamp+0x2>
    10da:	b0 93 77 01 	sts	0x0177, r27	; 0x800177 <timestamp+0x3>
    10de:	e0 91 22 02 	lds	r30, 0x0222	; 0x800222 <mtable+0xe>
    10e2:	f0 91 23 02 	lds	r31, 0x0223	; 0x800223 <mtable+0xf>
    10e6:	30 97       	sbiw	r30, 0x00	; 0
    10e8:	39 f0       	breq	.+14     	; 0x10f8 <__vector_12+0xb2>
    10ea:	67 e0       	ldi	r22, 0x07	; 7
    10ec:	70 e0       	ldi	r23, 0x00	; 0
    10ee:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <otable+0xe>
    10f2:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <otable+0xf>
    10f6:	09 95       	icall
    10f8:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <schedule>
    10fc:	ff 91       	pop	r31
    10fe:	ef 91       	pop	r30
    1100:	bf 91       	pop	r27
    1102:	af 91       	pop	r26
    1104:	9f 91       	pop	r25
    1106:	8f 91       	pop	r24
    1108:	7f 91       	pop	r23
    110a:	6f 91       	pop	r22
    110c:	5f 91       	pop	r21
    110e:	4f 91       	pop	r20
    1110:	3f 91       	pop	r19
    1112:	2f 91       	pop	r18
    1114:	0f 90       	pop	r0
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	0f 90       	pop	r0
    111a:	1f 90       	pop	r1
    111c:	18 95       	reti

0000111e <__vector_13>:
    111e:	1f 92       	push	r1
    1120:	0f 92       	push	r0
    1122:	0f b6       	in	r0, 0x3f	; 63
    1124:	0f 92       	push	r0
    1126:	11 24       	eor	r1, r1
    1128:	2f 93       	push	r18
    112a:	3f 93       	push	r19
    112c:	4f 93       	push	r20
    112e:	5f 93       	push	r21
    1130:	6f 93       	push	r22
    1132:	7f 93       	push	r23
    1134:	8f 93       	push	r24
    1136:	9f 93       	push	r25
    1138:	af 93       	push	r26
    113a:	bf 93       	push	r27
    113c:	ef 93       	push	r30
    113e:	ff 93       	push	r31
    1140:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <overflows>
    1144:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <overflows+0x1>
    1148:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    114c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1150:	c9 01       	movw	r24, r18
    1152:	03 2e       	mov	r0, r19
    1154:	00 0c       	add	r0, r0
    1156:	aa 0b       	sbc	r26, r26
    1158:	bb 0b       	sbc	r27, r27
    115a:	dc 01       	movw	r26, r24
    115c:	99 27       	eor	r25, r25
    115e:	88 27       	eor	r24, r24
    1160:	60 e0       	ldi	r22, 0x00	; 0
    1162:	70 e0       	ldi	r23, 0x00	; 0
    1164:	84 2b       	or	r24, r20
    1166:	95 2b       	or	r25, r21
    1168:	a6 2b       	or	r26, r22
    116a:	b7 2b       	or	r27, r23
    116c:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <timestamp>
    1170:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <timestamp+0x1>
    1174:	a0 93 76 01 	sts	0x0176, r26	; 0x800176 <timestamp+0x2>
    1178:	b0 93 77 01 	sts	0x0177, r27	; 0x800177 <timestamp+0x3>
    117c:	b0 9b       	sbis	0x16, 0	; 22
    117e:	1b c0       	rjmp	.+54     	; 0x11b6 <__vector_13+0x98>
    1180:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1184:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1188:	c9 01       	movw	r24, r18
    118a:	01 96       	adiw	r24, 0x01	; 1
    118c:	09 2e       	mov	r0, r25
    118e:	00 0c       	add	r0, r0
    1190:	aa 0b       	sbc	r26, r26
    1192:	bb 0b       	sbc	r27, r27
    1194:	dc 01       	movw	r26, r24
    1196:	99 27       	eor	r25, r25
    1198:	88 27       	eor	r24, r24
    119a:	60 e0       	ldi	r22, 0x00	; 0
    119c:	70 e0       	ldi	r23, 0x00	; 0
    119e:	84 2b       	or	r24, r20
    11a0:	95 2b       	or	r25, r21
    11a2:	a6 2b       	or	r26, r22
    11a4:	b7 2b       	or	r27, r23
    11a6:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <timestamp>
    11aa:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <timestamp+0x1>
    11ae:	a0 93 76 01 	sts	0x0176, r26	; 0x800176 <timestamp+0x2>
    11b2:	b0 93 77 01 	sts	0x0177, r27	; 0x800177 <timestamp+0x3>
    11b6:	e0 91 24 02 	lds	r30, 0x0224	; 0x800224 <mtable+0x10>
    11ba:	f0 91 25 02 	lds	r31, 0x0225	; 0x800225 <mtable+0x11>
    11be:	30 97       	sbiw	r30, 0x00	; 0
    11c0:	39 f0       	breq	.+14     	; 0x11d0 <__vector_13+0xb2>
    11c2:	68 e0       	ldi	r22, 0x08	; 8
    11c4:	70 e0       	ldi	r23, 0x00	; 0
    11c6:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <otable+0x10>
    11ca:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <otable+0x11>
    11ce:	09 95       	icall
    11d0:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <schedule>
    11d4:	ff 91       	pop	r31
    11d6:	ef 91       	pop	r30
    11d8:	bf 91       	pop	r27
    11da:	af 91       	pop	r26
    11dc:	9f 91       	pop	r25
    11de:	8f 91       	pop	r24
    11e0:	7f 91       	pop	r23
    11e2:	6f 91       	pop	r22
    11e4:	5f 91       	pop	r21
    11e6:	4f 91       	pop	r20
    11e8:	3f 91       	pop	r19
    11ea:	2f 91       	pop	r18
    11ec:	0f 90       	pop	r0
    11ee:	0f be       	out	0x3f, r0	; 63
    11f0:	0f 90       	pop	r0
    11f2:	1f 90       	pop	r1
    11f4:	18 95       	reti

000011f6 <__vector_14>:
    11f6:	1f 92       	push	r1
    11f8:	0f 92       	push	r0
    11fa:	0f b6       	in	r0, 0x3f	; 63
    11fc:	0f 92       	push	r0
    11fe:	11 24       	eor	r1, r1
    1200:	2f 93       	push	r18
    1202:	3f 93       	push	r19
    1204:	4f 93       	push	r20
    1206:	5f 93       	push	r21
    1208:	6f 93       	push	r22
    120a:	7f 93       	push	r23
    120c:	8f 93       	push	r24
    120e:	9f 93       	push	r25
    1210:	af 93       	push	r26
    1212:	bf 93       	push	r27
    1214:	ef 93       	push	r30
    1216:	ff 93       	push	r31
    1218:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <overflows>
    121c:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <overflows+0x1>
    1220:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1224:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1228:	c9 01       	movw	r24, r18
    122a:	03 2e       	mov	r0, r19
    122c:	00 0c       	add	r0, r0
    122e:	aa 0b       	sbc	r26, r26
    1230:	bb 0b       	sbc	r27, r27
    1232:	dc 01       	movw	r26, r24
    1234:	99 27       	eor	r25, r25
    1236:	88 27       	eor	r24, r24
    1238:	60 e0       	ldi	r22, 0x00	; 0
    123a:	70 e0       	ldi	r23, 0x00	; 0
    123c:	84 2b       	or	r24, r20
    123e:	95 2b       	or	r25, r21
    1240:	a6 2b       	or	r26, r22
    1242:	b7 2b       	or	r27, r23
    1244:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <timestamp>
    1248:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <timestamp+0x1>
    124c:	a0 93 76 01 	sts	0x0176, r26	; 0x800176 <timestamp+0x2>
    1250:	b0 93 77 01 	sts	0x0177, r27	; 0x800177 <timestamp+0x3>
    1254:	b0 9b       	sbis	0x16, 0	; 22
    1256:	1b c0       	rjmp	.+54     	; 0x128e <__vector_14+0x98>
    1258:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    125c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1260:	c9 01       	movw	r24, r18
    1262:	01 96       	adiw	r24, 0x01	; 1
    1264:	09 2e       	mov	r0, r25
    1266:	00 0c       	add	r0, r0
    1268:	aa 0b       	sbc	r26, r26
    126a:	bb 0b       	sbc	r27, r27
    126c:	dc 01       	movw	r26, r24
    126e:	99 27       	eor	r25, r25
    1270:	88 27       	eor	r24, r24
    1272:	60 e0       	ldi	r22, 0x00	; 0
    1274:	70 e0       	ldi	r23, 0x00	; 0
    1276:	84 2b       	or	r24, r20
    1278:	95 2b       	or	r25, r21
    127a:	a6 2b       	or	r26, r22
    127c:	b7 2b       	or	r27, r23
    127e:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <timestamp>
    1282:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <timestamp+0x1>
    1286:	a0 93 76 01 	sts	0x0176, r26	; 0x800176 <timestamp+0x2>
    128a:	b0 93 77 01 	sts	0x0177, r27	; 0x800177 <timestamp+0x3>
    128e:	e0 91 26 02 	lds	r30, 0x0226	; 0x800226 <mtable+0x12>
    1292:	f0 91 27 02 	lds	r31, 0x0227	; 0x800227 <mtable+0x13>
    1296:	30 97       	sbiw	r30, 0x00	; 0
    1298:	39 f0       	breq	.+14     	; 0x12a8 <__vector_14+0xb2>
    129a:	69 e0       	ldi	r22, 0x09	; 9
    129c:	70 e0       	ldi	r23, 0x00	; 0
    129e:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <otable+0x12>
    12a2:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <otable+0x13>
    12a6:	09 95       	icall
    12a8:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <schedule>
    12ac:	ff 91       	pop	r31
    12ae:	ef 91       	pop	r30
    12b0:	bf 91       	pop	r27
    12b2:	af 91       	pop	r26
    12b4:	9f 91       	pop	r25
    12b6:	8f 91       	pop	r24
    12b8:	7f 91       	pop	r23
    12ba:	6f 91       	pop	r22
    12bc:	5f 91       	pop	r21
    12be:	4f 91       	pop	r20
    12c0:	3f 91       	pop	r19
    12c2:	2f 91       	pop	r18
    12c4:	0f 90       	pop	r0
    12c6:	0f be       	out	0x3f, r0	; 63
    12c8:	0f 90       	pop	r0
    12ca:	1f 90       	pop	r1
    12cc:	18 95       	reti

000012ce <__vector_15>:
    12ce:	1f 92       	push	r1
    12d0:	0f 92       	push	r0
    12d2:	0f b6       	in	r0, 0x3f	; 63
    12d4:	0f 92       	push	r0
    12d6:	11 24       	eor	r1, r1
    12d8:	2f 93       	push	r18
    12da:	3f 93       	push	r19
    12dc:	4f 93       	push	r20
    12de:	5f 93       	push	r21
    12e0:	6f 93       	push	r22
    12e2:	7f 93       	push	r23
    12e4:	8f 93       	push	r24
    12e6:	9f 93       	push	r25
    12e8:	af 93       	push	r26
    12ea:	bf 93       	push	r27
    12ec:	ef 93       	push	r30
    12ee:	ff 93       	push	r31
    12f0:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <overflows>
    12f4:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <overflows+0x1>
    12f8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12fc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1300:	c9 01       	movw	r24, r18
    1302:	03 2e       	mov	r0, r19
    1304:	00 0c       	add	r0, r0
    1306:	aa 0b       	sbc	r26, r26
    1308:	bb 0b       	sbc	r27, r27
    130a:	dc 01       	movw	r26, r24
    130c:	99 27       	eor	r25, r25
    130e:	88 27       	eor	r24, r24
    1310:	60 e0       	ldi	r22, 0x00	; 0
    1312:	70 e0       	ldi	r23, 0x00	; 0
    1314:	84 2b       	or	r24, r20
    1316:	95 2b       	or	r25, r21
    1318:	a6 2b       	or	r26, r22
    131a:	b7 2b       	or	r27, r23
    131c:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <timestamp>
    1320:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <timestamp+0x1>
    1324:	a0 93 76 01 	sts	0x0176, r26	; 0x800176 <timestamp+0x2>
    1328:	b0 93 77 01 	sts	0x0177, r27	; 0x800177 <timestamp+0x3>
    132c:	b0 9b       	sbis	0x16, 0	; 22
    132e:	1b c0       	rjmp	.+54     	; 0x1366 <__vector_15+0x98>
    1330:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1334:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1338:	c9 01       	movw	r24, r18
    133a:	01 96       	adiw	r24, 0x01	; 1
    133c:	09 2e       	mov	r0, r25
    133e:	00 0c       	add	r0, r0
    1340:	aa 0b       	sbc	r26, r26
    1342:	bb 0b       	sbc	r27, r27
    1344:	dc 01       	movw	r26, r24
    1346:	99 27       	eor	r25, r25
    1348:	88 27       	eor	r24, r24
    134a:	60 e0       	ldi	r22, 0x00	; 0
    134c:	70 e0       	ldi	r23, 0x00	; 0
    134e:	84 2b       	or	r24, r20
    1350:	95 2b       	or	r25, r21
    1352:	a6 2b       	or	r26, r22
    1354:	b7 2b       	or	r27, r23
    1356:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <timestamp>
    135a:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <timestamp+0x1>
    135e:	a0 93 76 01 	sts	0x0176, r26	; 0x800176 <timestamp+0x2>
    1362:	b0 93 77 01 	sts	0x0177, r27	; 0x800177 <timestamp+0x3>
    1366:	e0 91 28 02 	lds	r30, 0x0228	; 0x800228 <mtable+0x14>
    136a:	f0 91 29 02 	lds	r31, 0x0229	; 0x800229 <mtable+0x15>
    136e:	30 97       	sbiw	r30, 0x00	; 0
    1370:	39 f0       	breq	.+14     	; 0x1380 <__vector_15+0xb2>
    1372:	6a e0       	ldi	r22, 0x0A	; 10
    1374:	70 e0       	ldi	r23, 0x00	; 0
    1376:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <otable+0x14>
    137a:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <otable+0x15>
    137e:	09 95       	icall
    1380:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <schedule>
    1384:	ff 91       	pop	r31
    1386:	ef 91       	pop	r30
    1388:	bf 91       	pop	r27
    138a:	af 91       	pop	r26
    138c:	9f 91       	pop	r25
    138e:	8f 91       	pop	r24
    1390:	7f 91       	pop	r23
    1392:	6f 91       	pop	r22
    1394:	5f 91       	pop	r21
    1396:	4f 91       	pop	r20
    1398:	3f 91       	pop	r19
    139a:	2f 91       	pop	r18
    139c:	0f 90       	pop	r0
    139e:	0f be       	out	0x3f, r0	; 63
    13a0:	0f 90       	pop	r0
    13a2:	1f 90       	pop	r1
    13a4:	18 95       	reti

000013a6 <__vector_16>:
    13a6:	1f 92       	push	r1
    13a8:	0f 92       	push	r0
    13aa:	0f b6       	in	r0, 0x3f	; 63
    13ac:	0f 92       	push	r0
    13ae:	11 24       	eor	r1, r1
    13b0:	2f 93       	push	r18
    13b2:	3f 93       	push	r19
    13b4:	4f 93       	push	r20
    13b6:	5f 93       	push	r21
    13b8:	6f 93       	push	r22
    13ba:	7f 93       	push	r23
    13bc:	8f 93       	push	r24
    13be:	9f 93       	push	r25
    13c0:	af 93       	push	r26
    13c2:	bf 93       	push	r27
    13c4:	ef 93       	push	r30
    13c6:	ff 93       	push	r31
    13c8:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <overflows>
    13cc:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <overflows+0x1>
    13d0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13d4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    13d8:	c9 01       	movw	r24, r18
    13da:	03 2e       	mov	r0, r19
    13dc:	00 0c       	add	r0, r0
    13de:	aa 0b       	sbc	r26, r26
    13e0:	bb 0b       	sbc	r27, r27
    13e2:	dc 01       	movw	r26, r24
    13e4:	99 27       	eor	r25, r25
    13e6:	88 27       	eor	r24, r24
    13e8:	60 e0       	ldi	r22, 0x00	; 0
    13ea:	70 e0       	ldi	r23, 0x00	; 0
    13ec:	84 2b       	or	r24, r20
    13ee:	95 2b       	or	r25, r21
    13f0:	a6 2b       	or	r26, r22
    13f2:	b7 2b       	or	r27, r23
    13f4:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <timestamp>
    13f8:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <timestamp+0x1>
    13fc:	a0 93 76 01 	sts	0x0176, r26	; 0x800176 <timestamp+0x2>
    1400:	b0 93 77 01 	sts	0x0177, r27	; 0x800177 <timestamp+0x3>
    1404:	b0 9b       	sbis	0x16, 0	; 22
    1406:	1b c0       	rjmp	.+54     	; 0x143e <__vector_16+0x98>
    1408:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    140c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1410:	c9 01       	movw	r24, r18
    1412:	01 96       	adiw	r24, 0x01	; 1
    1414:	09 2e       	mov	r0, r25
    1416:	00 0c       	add	r0, r0
    1418:	aa 0b       	sbc	r26, r26
    141a:	bb 0b       	sbc	r27, r27
    141c:	dc 01       	movw	r26, r24
    141e:	99 27       	eor	r25, r25
    1420:	88 27       	eor	r24, r24
    1422:	60 e0       	ldi	r22, 0x00	; 0
    1424:	70 e0       	ldi	r23, 0x00	; 0
    1426:	84 2b       	or	r24, r20
    1428:	95 2b       	or	r25, r21
    142a:	a6 2b       	or	r26, r22
    142c:	b7 2b       	or	r27, r23
    142e:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <timestamp>
    1432:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <timestamp+0x1>
    1436:	a0 93 76 01 	sts	0x0176, r26	; 0x800176 <timestamp+0x2>
    143a:	b0 93 77 01 	sts	0x0177, r27	; 0x800177 <timestamp+0x3>
    143e:	e0 91 2a 02 	lds	r30, 0x022A	; 0x80022a <mtable+0x16>
    1442:	f0 91 2b 02 	lds	r31, 0x022B	; 0x80022b <mtable+0x17>
    1446:	30 97       	sbiw	r30, 0x00	; 0
    1448:	39 f0       	breq	.+14     	; 0x1458 <__vector_16+0xb2>
    144a:	6b e0       	ldi	r22, 0x0B	; 11
    144c:	70 e0       	ldi	r23, 0x00	; 0
    144e:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <otable+0x16>
    1452:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <otable+0x17>
    1456:	09 95       	icall
    1458:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <schedule>
    145c:	ff 91       	pop	r31
    145e:	ef 91       	pop	r30
    1460:	bf 91       	pop	r27
    1462:	af 91       	pop	r26
    1464:	9f 91       	pop	r25
    1466:	8f 91       	pop	r24
    1468:	7f 91       	pop	r23
    146a:	6f 91       	pop	r22
    146c:	5f 91       	pop	r21
    146e:	4f 91       	pop	r20
    1470:	3f 91       	pop	r19
    1472:	2f 91       	pop	r18
    1474:	0f 90       	pop	r0
    1476:	0f be       	out	0x3f, r0	; 63
    1478:	0f 90       	pop	r0
    147a:	1f 90       	pop	r1
    147c:	18 95       	reti

0000147e <__vector_17>:
    147e:	1f 92       	push	r1
    1480:	0f 92       	push	r0
    1482:	0f b6       	in	r0, 0x3f	; 63
    1484:	0f 92       	push	r0
    1486:	11 24       	eor	r1, r1
    1488:	2f 93       	push	r18
    148a:	3f 93       	push	r19
    148c:	4f 93       	push	r20
    148e:	5f 93       	push	r21
    1490:	6f 93       	push	r22
    1492:	7f 93       	push	r23
    1494:	8f 93       	push	r24
    1496:	9f 93       	push	r25
    1498:	af 93       	push	r26
    149a:	bf 93       	push	r27
    149c:	ef 93       	push	r30
    149e:	ff 93       	push	r31
    14a0:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <overflows>
    14a4:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <overflows+0x1>
    14a8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    14ac:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    14b0:	c9 01       	movw	r24, r18
    14b2:	03 2e       	mov	r0, r19
    14b4:	00 0c       	add	r0, r0
    14b6:	aa 0b       	sbc	r26, r26
    14b8:	bb 0b       	sbc	r27, r27
    14ba:	dc 01       	movw	r26, r24
    14bc:	99 27       	eor	r25, r25
    14be:	88 27       	eor	r24, r24
    14c0:	60 e0       	ldi	r22, 0x00	; 0
    14c2:	70 e0       	ldi	r23, 0x00	; 0
    14c4:	84 2b       	or	r24, r20
    14c6:	95 2b       	or	r25, r21
    14c8:	a6 2b       	or	r26, r22
    14ca:	b7 2b       	or	r27, r23
    14cc:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <timestamp>
    14d0:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <timestamp+0x1>
    14d4:	a0 93 76 01 	sts	0x0176, r26	; 0x800176 <timestamp+0x2>
    14d8:	b0 93 77 01 	sts	0x0177, r27	; 0x800177 <timestamp+0x3>
    14dc:	b0 9b       	sbis	0x16, 0	; 22
    14de:	1b c0       	rjmp	.+54     	; 0x1516 <__vector_17+0x98>
    14e0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    14e4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    14e8:	c9 01       	movw	r24, r18
    14ea:	01 96       	adiw	r24, 0x01	; 1
    14ec:	09 2e       	mov	r0, r25
    14ee:	00 0c       	add	r0, r0
    14f0:	aa 0b       	sbc	r26, r26
    14f2:	bb 0b       	sbc	r27, r27
    14f4:	dc 01       	movw	r26, r24
    14f6:	99 27       	eor	r25, r25
    14f8:	88 27       	eor	r24, r24
    14fa:	60 e0       	ldi	r22, 0x00	; 0
    14fc:	70 e0       	ldi	r23, 0x00	; 0
    14fe:	84 2b       	or	r24, r20
    1500:	95 2b       	or	r25, r21
    1502:	a6 2b       	or	r26, r22
    1504:	b7 2b       	or	r27, r23
    1506:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <timestamp>
    150a:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <timestamp+0x1>
    150e:	a0 93 76 01 	sts	0x0176, r26	; 0x800176 <timestamp+0x2>
    1512:	b0 93 77 01 	sts	0x0177, r27	; 0x800177 <timestamp+0x3>
    1516:	e0 91 2c 02 	lds	r30, 0x022C	; 0x80022c <mtable+0x18>
    151a:	f0 91 2d 02 	lds	r31, 0x022D	; 0x80022d <mtable+0x19>
    151e:	30 97       	sbiw	r30, 0x00	; 0
    1520:	39 f0       	breq	.+14     	; 0x1530 <__vector_17+0xb2>
    1522:	6c e0       	ldi	r22, 0x0C	; 12
    1524:	70 e0       	ldi	r23, 0x00	; 0
    1526:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <otable+0x18>
    152a:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <otable+0x19>
    152e:	09 95       	icall
    1530:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <schedule>
    1534:	ff 91       	pop	r31
    1536:	ef 91       	pop	r30
    1538:	bf 91       	pop	r27
    153a:	af 91       	pop	r26
    153c:	9f 91       	pop	r25
    153e:	8f 91       	pop	r24
    1540:	7f 91       	pop	r23
    1542:	6f 91       	pop	r22
    1544:	5f 91       	pop	r21
    1546:	4f 91       	pop	r20
    1548:	3f 91       	pop	r19
    154a:	2f 91       	pop	r18
    154c:	0f 90       	pop	r0
    154e:	0f be       	out	0x3f, r0	; 63
    1550:	0f 90       	pop	r0
    1552:	1f 90       	pop	r1
    1554:	18 95       	reti

00001556 <__vector_18>:
    1556:	1f 92       	push	r1
    1558:	0f 92       	push	r0
    155a:	0f b6       	in	r0, 0x3f	; 63
    155c:	0f 92       	push	r0
    155e:	11 24       	eor	r1, r1
    1560:	2f 93       	push	r18
    1562:	3f 93       	push	r19
    1564:	4f 93       	push	r20
    1566:	5f 93       	push	r21
    1568:	6f 93       	push	r22
    156a:	7f 93       	push	r23
    156c:	8f 93       	push	r24
    156e:	9f 93       	push	r25
    1570:	af 93       	push	r26
    1572:	bf 93       	push	r27
    1574:	ef 93       	push	r30
    1576:	ff 93       	push	r31
    1578:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <overflows>
    157c:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <overflows+0x1>
    1580:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1584:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1588:	c9 01       	movw	r24, r18
    158a:	03 2e       	mov	r0, r19
    158c:	00 0c       	add	r0, r0
    158e:	aa 0b       	sbc	r26, r26
    1590:	bb 0b       	sbc	r27, r27
    1592:	dc 01       	movw	r26, r24
    1594:	99 27       	eor	r25, r25
    1596:	88 27       	eor	r24, r24
    1598:	60 e0       	ldi	r22, 0x00	; 0
    159a:	70 e0       	ldi	r23, 0x00	; 0
    159c:	84 2b       	or	r24, r20
    159e:	95 2b       	or	r25, r21
    15a0:	a6 2b       	or	r26, r22
    15a2:	b7 2b       	or	r27, r23
    15a4:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <timestamp>
    15a8:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <timestamp+0x1>
    15ac:	a0 93 76 01 	sts	0x0176, r26	; 0x800176 <timestamp+0x2>
    15b0:	b0 93 77 01 	sts	0x0177, r27	; 0x800177 <timestamp+0x3>
    15b4:	b0 9b       	sbis	0x16, 0	; 22
    15b6:	1b c0       	rjmp	.+54     	; 0x15ee <__vector_18+0x98>
    15b8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    15bc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    15c0:	c9 01       	movw	r24, r18
    15c2:	01 96       	adiw	r24, 0x01	; 1
    15c4:	09 2e       	mov	r0, r25
    15c6:	00 0c       	add	r0, r0
    15c8:	aa 0b       	sbc	r26, r26
    15ca:	bb 0b       	sbc	r27, r27
    15cc:	dc 01       	movw	r26, r24
    15ce:	99 27       	eor	r25, r25
    15d0:	88 27       	eor	r24, r24
    15d2:	60 e0       	ldi	r22, 0x00	; 0
    15d4:	70 e0       	ldi	r23, 0x00	; 0
    15d6:	84 2b       	or	r24, r20
    15d8:	95 2b       	or	r25, r21
    15da:	a6 2b       	or	r26, r22
    15dc:	b7 2b       	or	r27, r23
    15de:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <timestamp>
    15e2:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <timestamp+0x1>
    15e6:	a0 93 76 01 	sts	0x0176, r26	; 0x800176 <timestamp+0x2>
    15ea:	b0 93 77 01 	sts	0x0177, r27	; 0x800177 <timestamp+0x3>
    15ee:	e0 91 2e 02 	lds	r30, 0x022E	; 0x80022e <mtable+0x1a>
    15f2:	f0 91 2f 02 	lds	r31, 0x022F	; 0x80022f <mtable+0x1b>
    15f6:	30 97       	sbiw	r30, 0x00	; 0
    15f8:	39 f0       	breq	.+14     	; 0x1608 <__vector_18+0xb2>
    15fa:	6d e0       	ldi	r22, 0x0D	; 13
    15fc:	70 e0       	ldi	r23, 0x00	; 0
    15fe:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <otable+0x1a>
    1602:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <otable+0x1b>
    1606:	09 95       	icall
    1608:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <schedule>
    160c:	ff 91       	pop	r31
    160e:	ef 91       	pop	r30
    1610:	bf 91       	pop	r27
    1612:	af 91       	pop	r26
    1614:	9f 91       	pop	r25
    1616:	8f 91       	pop	r24
    1618:	7f 91       	pop	r23
    161a:	6f 91       	pop	r22
    161c:	5f 91       	pop	r21
    161e:	4f 91       	pop	r20
    1620:	3f 91       	pop	r19
    1622:	2f 91       	pop	r18
    1624:	0f 90       	pop	r0
    1626:	0f be       	out	0x3f, r0	; 63
    1628:	0f 90       	pop	r0
    162a:	1f 90       	pop	r1
    162c:	18 95       	reti

0000162e <__vector_19>:
    162e:	1f 92       	push	r1
    1630:	0f 92       	push	r0
    1632:	0f b6       	in	r0, 0x3f	; 63
    1634:	0f 92       	push	r0
    1636:	11 24       	eor	r1, r1
    1638:	2f 93       	push	r18
    163a:	3f 93       	push	r19
    163c:	4f 93       	push	r20
    163e:	5f 93       	push	r21
    1640:	6f 93       	push	r22
    1642:	7f 93       	push	r23
    1644:	8f 93       	push	r24
    1646:	9f 93       	push	r25
    1648:	af 93       	push	r26
    164a:	bf 93       	push	r27
    164c:	ef 93       	push	r30
    164e:	ff 93       	push	r31
    1650:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <overflows>
    1654:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <overflows+0x1>
    1658:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    165c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1660:	c9 01       	movw	r24, r18
    1662:	03 2e       	mov	r0, r19
    1664:	00 0c       	add	r0, r0
    1666:	aa 0b       	sbc	r26, r26
    1668:	bb 0b       	sbc	r27, r27
    166a:	dc 01       	movw	r26, r24
    166c:	99 27       	eor	r25, r25
    166e:	88 27       	eor	r24, r24
    1670:	60 e0       	ldi	r22, 0x00	; 0
    1672:	70 e0       	ldi	r23, 0x00	; 0
    1674:	84 2b       	or	r24, r20
    1676:	95 2b       	or	r25, r21
    1678:	a6 2b       	or	r26, r22
    167a:	b7 2b       	or	r27, r23
    167c:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <timestamp>
    1680:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <timestamp+0x1>
    1684:	a0 93 76 01 	sts	0x0176, r26	; 0x800176 <timestamp+0x2>
    1688:	b0 93 77 01 	sts	0x0177, r27	; 0x800177 <timestamp+0x3>
    168c:	b0 9b       	sbis	0x16, 0	; 22
    168e:	1b c0       	rjmp	.+54     	; 0x16c6 <__vector_19+0x98>
    1690:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1694:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1698:	c9 01       	movw	r24, r18
    169a:	01 96       	adiw	r24, 0x01	; 1
    169c:	09 2e       	mov	r0, r25
    169e:	00 0c       	add	r0, r0
    16a0:	aa 0b       	sbc	r26, r26
    16a2:	bb 0b       	sbc	r27, r27
    16a4:	dc 01       	movw	r26, r24
    16a6:	99 27       	eor	r25, r25
    16a8:	88 27       	eor	r24, r24
    16aa:	60 e0       	ldi	r22, 0x00	; 0
    16ac:	70 e0       	ldi	r23, 0x00	; 0
    16ae:	84 2b       	or	r24, r20
    16b0:	95 2b       	or	r25, r21
    16b2:	a6 2b       	or	r26, r22
    16b4:	b7 2b       	or	r27, r23
    16b6:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <timestamp>
    16ba:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <timestamp+0x1>
    16be:	a0 93 76 01 	sts	0x0176, r26	; 0x800176 <timestamp+0x2>
    16c2:	b0 93 77 01 	sts	0x0177, r27	; 0x800177 <timestamp+0x3>
    16c6:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <mtable+0x1c>
    16ca:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <mtable+0x1d>
    16ce:	30 97       	sbiw	r30, 0x00	; 0
    16d0:	39 f0       	breq	.+14     	; 0x16e0 <__vector_19+0xb2>
    16d2:	6e e0       	ldi	r22, 0x0E	; 14
    16d4:	70 e0       	ldi	r23, 0x00	; 0
    16d6:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <otable+0x1c>
    16da:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <otable+0x1d>
    16de:	09 95       	icall
    16e0:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <schedule>
    16e4:	ff 91       	pop	r31
    16e6:	ef 91       	pop	r30
    16e8:	bf 91       	pop	r27
    16ea:	af 91       	pop	r26
    16ec:	9f 91       	pop	r25
    16ee:	8f 91       	pop	r24
    16f0:	7f 91       	pop	r23
    16f2:	6f 91       	pop	r22
    16f4:	5f 91       	pop	r21
    16f6:	4f 91       	pop	r20
    16f8:	3f 91       	pop	r19
    16fa:	2f 91       	pop	r18
    16fc:	0f 90       	pop	r0
    16fe:	0f be       	out	0x3f, r0	; 63
    1700:	0f 90       	pop	r0
    1702:	1f 90       	pop	r1
    1704:	18 95       	reti

00001706 <__vector_20>:
    1706:	1f 92       	push	r1
    1708:	0f 92       	push	r0
    170a:	0f b6       	in	r0, 0x3f	; 63
    170c:	0f 92       	push	r0
    170e:	11 24       	eor	r1, r1
    1710:	2f 93       	push	r18
    1712:	3f 93       	push	r19
    1714:	4f 93       	push	r20
    1716:	5f 93       	push	r21
    1718:	6f 93       	push	r22
    171a:	7f 93       	push	r23
    171c:	8f 93       	push	r24
    171e:	9f 93       	push	r25
    1720:	af 93       	push	r26
    1722:	bf 93       	push	r27
    1724:	ef 93       	push	r30
    1726:	ff 93       	push	r31
    1728:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <overflows>
    172c:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <overflows+0x1>
    1730:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1734:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1738:	c9 01       	movw	r24, r18
    173a:	03 2e       	mov	r0, r19
    173c:	00 0c       	add	r0, r0
    173e:	aa 0b       	sbc	r26, r26
    1740:	bb 0b       	sbc	r27, r27
    1742:	dc 01       	movw	r26, r24
    1744:	99 27       	eor	r25, r25
    1746:	88 27       	eor	r24, r24
    1748:	60 e0       	ldi	r22, 0x00	; 0
    174a:	70 e0       	ldi	r23, 0x00	; 0
    174c:	84 2b       	or	r24, r20
    174e:	95 2b       	or	r25, r21
    1750:	a6 2b       	or	r26, r22
    1752:	b7 2b       	or	r27, r23
    1754:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <timestamp>
    1758:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <timestamp+0x1>
    175c:	a0 93 76 01 	sts	0x0176, r26	; 0x800176 <timestamp+0x2>
    1760:	b0 93 77 01 	sts	0x0177, r27	; 0x800177 <timestamp+0x3>
    1764:	b0 9b       	sbis	0x16, 0	; 22
    1766:	1b c0       	rjmp	.+54     	; 0x179e <__vector_20+0x98>
    1768:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    176c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1770:	c9 01       	movw	r24, r18
    1772:	01 96       	adiw	r24, 0x01	; 1
    1774:	09 2e       	mov	r0, r25
    1776:	00 0c       	add	r0, r0
    1778:	aa 0b       	sbc	r26, r26
    177a:	bb 0b       	sbc	r27, r27
    177c:	dc 01       	movw	r26, r24
    177e:	99 27       	eor	r25, r25
    1780:	88 27       	eor	r24, r24
    1782:	60 e0       	ldi	r22, 0x00	; 0
    1784:	70 e0       	ldi	r23, 0x00	; 0
    1786:	84 2b       	or	r24, r20
    1788:	95 2b       	or	r25, r21
    178a:	a6 2b       	or	r26, r22
    178c:	b7 2b       	or	r27, r23
    178e:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <timestamp>
    1792:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <timestamp+0x1>
    1796:	a0 93 76 01 	sts	0x0176, r26	; 0x800176 <timestamp+0x2>
    179a:	b0 93 77 01 	sts	0x0177, r27	; 0x800177 <timestamp+0x3>
    179e:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <mtable+0x1e>
    17a2:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <mtable+0x1f>
    17a6:	30 97       	sbiw	r30, 0x00	; 0
    17a8:	39 f0       	breq	.+14     	; 0x17b8 <__vector_20+0xb2>
    17aa:	6f e0       	ldi	r22, 0x0F	; 15
    17ac:	70 e0       	ldi	r23, 0x00	; 0
    17ae:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <otable+0x1e>
    17b2:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <otable+0x1f>
    17b6:	09 95       	icall
    17b8:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <schedule>
    17bc:	ff 91       	pop	r31
    17be:	ef 91       	pop	r30
    17c0:	bf 91       	pop	r27
    17c2:	af 91       	pop	r26
    17c4:	9f 91       	pop	r25
    17c6:	8f 91       	pop	r24
    17c8:	7f 91       	pop	r23
    17ca:	6f 91       	pop	r22
    17cc:	5f 91       	pop	r21
    17ce:	4f 91       	pop	r20
    17d0:	3f 91       	pop	r19
    17d2:	2f 91       	pop	r18
    17d4:	0f 90       	pop	r0
    17d6:	0f be       	out	0x3f, r0	; 63
    17d8:	0f 90       	pop	r0
    17da:	1f 90       	pop	r1
    17dc:	18 95       	reti

000017de <__vector_21>:
    17de:	1f 92       	push	r1
    17e0:	0f 92       	push	r0
    17e2:	0f b6       	in	r0, 0x3f	; 63
    17e4:	0f 92       	push	r0
    17e6:	11 24       	eor	r1, r1
    17e8:	2f 93       	push	r18
    17ea:	3f 93       	push	r19
    17ec:	4f 93       	push	r20
    17ee:	5f 93       	push	r21
    17f0:	6f 93       	push	r22
    17f2:	7f 93       	push	r23
    17f4:	8f 93       	push	r24
    17f6:	9f 93       	push	r25
    17f8:	af 93       	push	r26
    17fa:	bf 93       	push	r27
    17fc:	ef 93       	push	r30
    17fe:	ff 93       	push	r31
    1800:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <overflows>
    1804:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <overflows+0x1>
    1808:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    180c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1810:	c9 01       	movw	r24, r18
    1812:	03 2e       	mov	r0, r19
    1814:	00 0c       	add	r0, r0
    1816:	aa 0b       	sbc	r26, r26
    1818:	bb 0b       	sbc	r27, r27
    181a:	dc 01       	movw	r26, r24
    181c:	99 27       	eor	r25, r25
    181e:	88 27       	eor	r24, r24
    1820:	60 e0       	ldi	r22, 0x00	; 0
    1822:	70 e0       	ldi	r23, 0x00	; 0
    1824:	84 2b       	or	r24, r20
    1826:	95 2b       	or	r25, r21
    1828:	a6 2b       	or	r26, r22
    182a:	b7 2b       	or	r27, r23
    182c:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <timestamp>
    1830:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <timestamp+0x1>
    1834:	a0 93 76 01 	sts	0x0176, r26	; 0x800176 <timestamp+0x2>
    1838:	b0 93 77 01 	sts	0x0177, r27	; 0x800177 <timestamp+0x3>
    183c:	b0 9b       	sbis	0x16, 0	; 22
    183e:	1b c0       	rjmp	.+54     	; 0x1876 <__vector_21+0x98>
    1840:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1844:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1848:	c9 01       	movw	r24, r18
    184a:	01 96       	adiw	r24, 0x01	; 1
    184c:	09 2e       	mov	r0, r25
    184e:	00 0c       	add	r0, r0
    1850:	aa 0b       	sbc	r26, r26
    1852:	bb 0b       	sbc	r27, r27
    1854:	dc 01       	movw	r26, r24
    1856:	99 27       	eor	r25, r25
    1858:	88 27       	eor	r24, r24
    185a:	60 e0       	ldi	r22, 0x00	; 0
    185c:	70 e0       	ldi	r23, 0x00	; 0
    185e:	84 2b       	or	r24, r20
    1860:	95 2b       	or	r25, r21
    1862:	a6 2b       	or	r26, r22
    1864:	b7 2b       	or	r27, r23
    1866:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <timestamp>
    186a:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <timestamp+0x1>
    186e:	a0 93 76 01 	sts	0x0176, r26	; 0x800176 <timestamp+0x2>
    1872:	b0 93 77 01 	sts	0x0177, r27	; 0x800177 <timestamp+0x3>
    1876:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <mtable+0x20>
    187a:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <mtable+0x21>
    187e:	30 97       	sbiw	r30, 0x00	; 0
    1880:	39 f0       	breq	.+14     	; 0x1890 <__vector_21+0xb2>
    1882:	60 e1       	ldi	r22, 0x10	; 16
    1884:	70 e0       	ldi	r23, 0x00	; 0
    1886:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <otable+0x20>
    188a:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <otable+0x21>
    188e:	09 95       	icall
    1890:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <schedule>
    1894:	ff 91       	pop	r31
    1896:	ef 91       	pop	r30
    1898:	bf 91       	pop	r27
    189a:	af 91       	pop	r26
    189c:	9f 91       	pop	r25
    189e:	8f 91       	pop	r24
    18a0:	7f 91       	pop	r23
    18a2:	6f 91       	pop	r22
    18a4:	5f 91       	pop	r21
    18a6:	4f 91       	pop	r20
    18a8:	3f 91       	pop	r19
    18aa:	2f 91       	pop	r18
    18ac:	0f 90       	pop	r0
    18ae:	0f be       	out	0x3f, r0	; 63
    18b0:	0f 90       	pop	r0
    18b2:	1f 90       	pop	r1
    18b4:	18 95       	reti

000018b6 <__vector_22>:
    18b6:	1f 92       	push	r1
    18b8:	0f 92       	push	r0
    18ba:	0f b6       	in	r0, 0x3f	; 63
    18bc:	0f 92       	push	r0
    18be:	11 24       	eor	r1, r1
    18c0:	2f 93       	push	r18
    18c2:	3f 93       	push	r19
    18c4:	4f 93       	push	r20
    18c6:	5f 93       	push	r21
    18c8:	6f 93       	push	r22
    18ca:	7f 93       	push	r23
    18cc:	8f 93       	push	r24
    18ce:	9f 93       	push	r25
    18d0:	af 93       	push	r26
    18d2:	bf 93       	push	r27
    18d4:	ef 93       	push	r30
    18d6:	ff 93       	push	r31
    18d8:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <overflows>
    18dc:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <overflows+0x1>
    18e0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    18e4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18e8:	c9 01       	movw	r24, r18
    18ea:	03 2e       	mov	r0, r19
    18ec:	00 0c       	add	r0, r0
    18ee:	aa 0b       	sbc	r26, r26
    18f0:	bb 0b       	sbc	r27, r27
    18f2:	dc 01       	movw	r26, r24
    18f4:	99 27       	eor	r25, r25
    18f6:	88 27       	eor	r24, r24
    18f8:	60 e0       	ldi	r22, 0x00	; 0
    18fa:	70 e0       	ldi	r23, 0x00	; 0
    18fc:	84 2b       	or	r24, r20
    18fe:	95 2b       	or	r25, r21
    1900:	a6 2b       	or	r26, r22
    1902:	b7 2b       	or	r27, r23
    1904:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <timestamp>
    1908:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <timestamp+0x1>
    190c:	a0 93 76 01 	sts	0x0176, r26	; 0x800176 <timestamp+0x2>
    1910:	b0 93 77 01 	sts	0x0177, r27	; 0x800177 <timestamp+0x3>
    1914:	b0 9b       	sbis	0x16, 0	; 22
    1916:	1b c0       	rjmp	.+54     	; 0x194e <__vector_22+0x98>
    1918:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    191c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1920:	c9 01       	movw	r24, r18
    1922:	01 96       	adiw	r24, 0x01	; 1
    1924:	09 2e       	mov	r0, r25
    1926:	00 0c       	add	r0, r0
    1928:	aa 0b       	sbc	r26, r26
    192a:	bb 0b       	sbc	r27, r27
    192c:	dc 01       	movw	r26, r24
    192e:	99 27       	eor	r25, r25
    1930:	88 27       	eor	r24, r24
    1932:	60 e0       	ldi	r22, 0x00	; 0
    1934:	70 e0       	ldi	r23, 0x00	; 0
    1936:	84 2b       	or	r24, r20
    1938:	95 2b       	or	r25, r21
    193a:	a6 2b       	or	r26, r22
    193c:	b7 2b       	or	r27, r23
    193e:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <timestamp>
    1942:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <timestamp+0x1>
    1946:	a0 93 76 01 	sts	0x0176, r26	; 0x800176 <timestamp+0x2>
    194a:	b0 93 77 01 	sts	0x0177, r27	; 0x800177 <timestamp+0x3>
    194e:	e0 91 36 02 	lds	r30, 0x0236	; 0x800236 <mtable+0x22>
    1952:	f0 91 37 02 	lds	r31, 0x0237	; 0x800237 <mtable+0x23>
    1956:	30 97       	sbiw	r30, 0x00	; 0
    1958:	39 f0       	breq	.+14     	; 0x1968 <__vector_22+0xb2>
    195a:	61 e1       	ldi	r22, 0x11	; 17
    195c:	70 e0       	ldi	r23, 0x00	; 0
    195e:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <otable+0x22>
    1962:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <otable+0x23>
    1966:	09 95       	icall
    1968:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <schedule>
    196c:	ff 91       	pop	r31
    196e:	ef 91       	pop	r30
    1970:	bf 91       	pop	r27
    1972:	af 91       	pop	r26
    1974:	9f 91       	pop	r25
    1976:	8f 91       	pop	r24
    1978:	7f 91       	pop	r23
    197a:	6f 91       	pop	r22
    197c:	5f 91       	pop	r21
    197e:	4f 91       	pop	r20
    1980:	3f 91       	pop	r19
    1982:	2f 91       	pop	r18
    1984:	0f 90       	pop	r0
    1986:	0f be       	out	0x3f, r0	; 63
    1988:	0f 90       	pop	r0
    198a:	1f 90       	pop	r1
    198c:	18 95       	reti

0000198e <enqueueByDeadline>:
    198e:	ef 92       	push	r14
    1990:	ff 92       	push	r15
    1992:	0f 93       	push	r16
    1994:	1f 93       	push	r17
    1996:	cf 93       	push	r28
    1998:	df 93       	push	r29
    199a:	7b 01       	movw	r14, r22
    199c:	eb 01       	movw	r28, r22
    199e:	a8 81       	ld	r26, Y
    19a0:	b9 81       	ldd	r27, Y+1	; 0x01
    19a2:	10 97       	sbiw	r26, 0x00	; 0
    19a4:	61 f1       	breq	.+88     	; 0x19fe <enqueueByDeadline+0x70>
    19a6:	fc 01       	movw	r30, r24
    19a8:	06 81       	ldd	r16, Z+6	; 0x06
    19aa:	17 81       	ldd	r17, Z+7	; 0x07
    19ac:	20 85       	ldd	r18, Z+8	; 0x08
    19ae:	31 85       	ldd	r19, Z+9	; 0x09
    19b0:	16 96       	adiw	r26, 0x06	; 6
    19b2:	4d 91       	ld	r20, X+
    19b4:	5d 91       	ld	r21, X+
    19b6:	6d 91       	ld	r22, X+
    19b8:	7c 91       	ld	r23, X
    19ba:	19 97       	sbiw	r26, 0x09	; 9
    19bc:	04 17       	cp	r16, r20
    19be:	15 07       	cpc	r17, r21
    19c0:	26 07       	cpc	r18, r22
    19c2:	37 07       	cpc	r19, r23
    19c4:	14 f4       	brge	.+4      	; 0x19ca <enqueueByDeadline+0x3c>
    19c6:	1b c0       	rjmp	.+54     	; 0x19fe <enqueueByDeadline+0x70>
    19c8:	df 01       	movw	r26, r30
    19ca:	ed 91       	ld	r30, X+
    19cc:	fc 91       	ld	r31, X
    19ce:	11 97       	sbiw	r26, 0x01	; 1
    19d0:	30 97       	sbiw	r30, 0x00	; 0
    19d2:	49 f0       	breq	.+18     	; 0x19e6 <enqueueByDeadline+0x58>
    19d4:	46 81       	ldd	r20, Z+6	; 0x06
    19d6:	57 81       	ldd	r21, Z+7	; 0x07
    19d8:	60 85       	ldd	r22, Z+8	; 0x08
    19da:	71 85       	ldd	r23, Z+9	; 0x09
    19dc:	04 17       	cp	r16, r20
    19de:	15 07       	cpc	r17, r21
    19e0:	26 07       	cpc	r18, r22
    19e2:	37 07       	cpc	r19, r23
    19e4:	8c f7       	brge	.-30     	; 0x19c8 <enqueueByDeadline+0x3a>
    19e6:	ec 01       	movw	r28, r24
    19e8:	f9 83       	std	Y+1, r31	; 0x01
    19ea:	e8 83       	st	Y, r30
    19ec:	10 97       	sbiw	r26, 0x00	; 0
    19ee:	21 f4       	brne	.+8      	; 0x19f8 <enqueueByDeadline+0x6a>
    19f0:	f7 01       	movw	r30, r14
    19f2:	91 83       	std	Z+1, r25	; 0x01
    19f4:	80 83       	st	Z, r24
    19f6:	07 c0       	rjmp	.+14     	; 0x1a06 <enqueueByDeadline+0x78>
    19f8:	8d 93       	st	X+, r24
    19fa:	9c 93       	st	X, r25
    19fc:	04 c0       	rjmp	.+8      	; 0x1a06 <enqueueByDeadline+0x78>
    19fe:	ec 01       	movw	r28, r24
    1a00:	b9 83       	std	Y+1, r27	; 0x01
    1a02:	a8 83       	st	Y, r26
    1a04:	f5 cf       	rjmp	.-22     	; 0x19f0 <enqueueByDeadline+0x62>
    1a06:	df 91       	pop	r29
    1a08:	cf 91       	pop	r28
    1a0a:	1f 91       	pop	r17
    1a0c:	0f 91       	pop	r16
    1a0e:	ff 90       	pop	r15
    1a10:	ef 90       	pop	r14
    1a12:	08 95       	ret

00001a14 <enqueueByBaseline>:
    1a14:	ef 92       	push	r14
    1a16:	ff 92       	push	r15
    1a18:	0f 93       	push	r16
    1a1a:	1f 93       	push	r17
    1a1c:	cf 93       	push	r28
    1a1e:	df 93       	push	r29
    1a20:	7b 01       	movw	r14, r22
    1a22:	eb 01       	movw	r28, r22
    1a24:	a8 81       	ld	r26, Y
    1a26:	b9 81       	ldd	r27, Y+1	; 0x01
    1a28:	10 97       	sbiw	r26, 0x00	; 0
    1a2a:	61 f1       	breq	.+88     	; 0x1a84 <enqueueByBaseline+0x70>
    1a2c:	fc 01       	movw	r30, r24
    1a2e:	02 81       	ldd	r16, Z+2	; 0x02
    1a30:	13 81       	ldd	r17, Z+3	; 0x03
    1a32:	24 81       	ldd	r18, Z+4	; 0x04
    1a34:	35 81       	ldd	r19, Z+5	; 0x05
    1a36:	12 96       	adiw	r26, 0x02	; 2
    1a38:	4d 91       	ld	r20, X+
    1a3a:	5d 91       	ld	r21, X+
    1a3c:	6d 91       	ld	r22, X+
    1a3e:	7c 91       	ld	r23, X
    1a40:	15 97       	sbiw	r26, 0x05	; 5
    1a42:	04 17       	cp	r16, r20
    1a44:	15 07       	cpc	r17, r21
    1a46:	26 07       	cpc	r18, r22
    1a48:	37 07       	cpc	r19, r23
    1a4a:	14 f4       	brge	.+4      	; 0x1a50 <enqueueByBaseline+0x3c>
    1a4c:	1b c0       	rjmp	.+54     	; 0x1a84 <enqueueByBaseline+0x70>
    1a4e:	df 01       	movw	r26, r30
    1a50:	ed 91       	ld	r30, X+
    1a52:	fc 91       	ld	r31, X
    1a54:	11 97       	sbiw	r26, 0x01	; 1
    1a56:	30 97       	sbiw	r30, 0x00	; 0
    1a58:	49 f0       	breq	.+18     	; 0x1a6c <enqueueByBaseline+0x58>
    1a5a:	42 81       	ldd	r20, Z+2	; 0x02
    1a5c:	53 81       	ldd	r21, Z+3	; 0x03
    1a5e:	64 81       	ldd	r22, Z+4	; 0x04
    1a60:	75 81       	ldd	r23, Z+5	; 0x05
    1a62:	04 17       	cp	r16, r20
    1a64:	15 07       	cpc	r17, r21
    1a66:	26 07       	cpc	r18, r22
    1a68:	37 07       	cpc	r19, r23
    1a6a:	8c f7       	brge	.-30     	; 0x1a4e <enqueueByBaseline+0x3a>
    1a6c:	ec 01       	movw	r28, r24
    1a6e:	f9 83       	std	Y+1, r31	; 0x01
    1a70:	e8 83       	st	Y, r30
    1a72:	10 97       	sbiw	r26, 0x00	; 0
    1a74:	21 f4       	brne	.+8      	; 0x1a7e <enqueueByBaseline+0x6a>
    1a76:	f7 01       	movw	r30, r14
    1a78:	91 83       	std	Z+1, r25	; 0x01
    1a7a:	80 83       	st	Z, r24
    1a7c:	07 c0       	rjmp	.+14     	; 0x1a8c <enqueueByBaseline+0x78>
    1a7e:	8d 93       	st	X+, r24
    1a80:	9c 93       	st	X, r25
    1a82:	04 c0       	rjmp	.+8      	; 0x1a8c <enqueueByBaseline+0x78>
    1a84:	ec 01       	movw	r28, r24
    1a86:	b9 83       	std	Y+1, r27	; 0x01
    1a88:	a8 83       	st	Y, r26
    1a8a:	f5 cf       	rjmp	.-22     	; 0x1a76 <enqueueByBaseline+0x62>
    1a8c:	df 91       	pop	r29
    1a8e:	cf 91       	pop	r28
    1a90:	1f 91       	pop	r17
    1a92:	0f 91       	pop	r16
    1a94:	ff 90       	pop	r15
    1a96:	ef 90       	pop	r14
    1a98:	08 95       	ret

00001a9a <dequeue>:
    1a9a:	cf 93       	push	r28
    1a9c:	df 93       	push	r29
    1a9e:	00 d0       	rcall	.+0      	; 0x1aa0 <dequeue+0x6>
    1aa0:	cd b7       	in	r28, 0x3d	; 61
    1aa2:	de b7       	in	r29, 0x3e	; 62
    1aa4:	fc 01       	movw	r30, r24
    1aa6:	20 81       	ld	r18, Z
    1aa8:	31 81       	ldd	r19, Z+1	; 0x01
    1aaa:	3a 83       	std	Y+2, r19	; 0x02
    1aac:	29 83       	std	Y+1, r18	; 0x01
    1aae:	29 81       	ldd	r18, Y+1	; 0x01
    1ab0:	3a 81       	ldd	r19, Y+2	; 0x02
    1ab2:	23 2b       	or	r18, r19
    1ab4:	51 f0       	breq	.+20     	; 0x1aca <dequeue+0x30>
    1ab6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ab8:	fa 81       	ldd	r31, Y+2	; 0x02
    1aba:	20 81       	ld	r18, Z
    1abc:	31 81       	ldd	r19, Z+1	; 0x01
    1abe:	fc 01       	movw	r30, r24
    1ac0:	31 83       	std	Z+1, r19	; 0x01
    1ac2:	20 83       	st	Z, r18
    1ac4:	89 81       	ldd	r24, Y+1	; 0x01
    1ac6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac8:	0b c0       	rjmp	.+22     	; 0x1ae0 <dequeue+0x46>
    1aca:	8f ef       	ldi	r24, 0xFF	; 255
    1acc:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
    1ad0:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
    1ad4:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	83 bf       	out	0x33, r24	; 51
    1adc:	88 95       	sleep
    1ade:	fd cf       	rjmp	.-6      	; 0x1ada <dequeue+0x40>
    1ae0:	0f 90       	pop	r0
    1ae2:	0f 90       	pop	r0
    1ae4:	df 91       	pop	r29
    1ae6:	cf 91       	pop	r28
    1ae8:	08 95       	ret

00001aea <__vector_9>:
    1aea:	1f 92       	push	r1
    1aec:	0f 92       	push	r0
    1aee:	0f b6       	in	r0, 0x3f	; 63
    1af0:	0f 92       	push	r0
    1af2:	11 24       	eor	r1, r1
    1af4:	2f 93       	push	r18
    1af6:	3f 93       	push	r19
    1af8:	4f 93       	push	r20
    1afa:	5f 93       	push	r21
    1afc:	6f 93       	push	r22
    1afe:	7f 93       	push	r23
    1b00:	8f 93       	push	r24
    1b02:	9f 93       	push	r25
    1b04:	ef 93       	push	r30
    1b06:	ff 93       	push	r31
    1b08:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <overflows>
    1b0c:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <overflows+0x1>
    1b10:	01 96       	adiw	r24, 0x01	; 1
    1b12:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <overflows+0x1>
    1b16:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <overflows>
    1b1a:	e0 91 78 01 	lds	r30, 0x0178	; 0x800178 <timerQ>
    1b1e:	f0 91 79 01 	lds	r31, 0x0179	; 0x800179 <timerQ+0x1>
    1b22:	30 97       	sbiw	r30, 0x00	; 0
    1b24:	01 f1       	breq	.+64     	; 0x1b66 <__vector_9+0x7c>
    1b26:	42 81       	ldd	r20, Z+2	; 0x02
    1b28:	53 81       	ldd	r21, Z+3	; 0x03
    1b2a:	64 81       	ldd	r22, Z+4	; 0x04
    1b2c:	75 81       	ldd	r23, Z+5	; 0x05
    1b2e:	86 17       	cp	r24, r22
    1b30:	97 07       	cpc	r25, r23
    1b32:	c9 f4       	brne	.+50     	; 0x1b66 <__vector_9+0x7c>
    1b34:	ca 01       	movw	r24, r20
    1b36:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b3a:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b3e:	42 1b       	sub	r20, r18
    1b40:	53 0b       	sbc	r21, r19
    1b42:	41 30       	cpi	r20, 0x01	; 1
    1b44:	51 05       	cpc	r21, r1
    1b46:	29 f4       	brne	.+10     	; 0x1b52 <__vector_9+0x68>
    1b48:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b4c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b50:	01 96       	adiw	r24, 0x01	; 1
    1b52:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1b56:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1b5a:	ef e6       	ldi	r30, 0x6F	; 111
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	80 81       	ld	r24, Z
    1b60:	82 60       	ori	r24, 0x02	; 2
    1b62:	80 83       	st	Z, r24
    1b64:	05 c0       	rjmp	.+10     	; 0x1b70 <__vector_9+0x86>
    1b66:	ef e6       	ldi	r30, 0x6F	; 111
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 81       	ld	r24, Z
    1b6c:	8d 7f       	andi	r24, 0xFD	; 253
    1b6e:	80 83       	st	Z, r24
    1b70:	ff 91       	pop	r31
    1b72:	ef 91       	pop	r30
    1b74:	9f 91       	pop	r25
    1b76:	8f 91       	pop	r24
    1b78:	7f 91       	pop	r23
    1b7a:	6f 91       	pop	r22
    1b7c:	5f 91       	pop	r21
    1b7e:	4f 91       	pop	r20
    1b80:	3f 91       	pop	r19
    1b82:	2f 91       	pop	r18
    1b84:	0f 90       	pop	r0
    1b86:	0f be       	out	0x3f, r0	; 63
    1b88:	0f 90       	pop	r0
    1b8a:	1f 90       	pop	r1
    1b8c:	18 95       	reti

00001b8e <__vector_7>:
    1b8e:	1f 92       	push	r1
    1b90:	0f 92       	push	r0
    1b92:	0f b6       	in	r0, 0x3f	; 63
    1b94:	0f 92       	push	r0
    1b96:	11 24       	eor	r1, r1
    1b98:	cf 92       	push	r12
    1b9a:	df 92       	push	r13
    1b9c:	ef 92       	push	r14
    1b9e:	ff 92       	push	r15
    1ba0:	2f 93       	push	r18
    1ba2:	3f 93       	push	r19
    1ba4:	4f 93       	push	r20
    1ba6:	5f 93       	push	r21
    1ba8:	6f 93       	push	r22
    1baa:	7f 93       	push	r23
    1bac:	8f 93       	push	r24
    1bae:	9f 93       	push	r25
    1bb0:	af 93       	push	r26
    1bb2:	bf 93       	push	r27
    1bb4:	ef 93       	push	r30
    1bb6:	ff 93       	push	r31
    1bb8:	c0 90 72 01 	lds	r12, 0x0172	; 0x800172 <overflows>
    1bbc:	d0 90 73 01 	lds	r13, 0x0173	; 0x800173 <overflows+0x1>
    1bc0:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1bc4:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1bc8:	b0 99       	sbic	0x16, 0	; 22
    1bca:	0f c0       	rjmp	.+30     	; 0x1bea <__vector_7+0x5c>
    1bcc:	0d 2c       	mov	r0, r13
    1bce:	00 0c       	add	r0, r0
    1bd0:	ee 08       	sbc	r14, r14
    1bd2:	ff 08       	sbc	r15, r15
    1bd4:	d6 01       	movw	r26, r12
    1bd6:	99 27       	eor	r25, r25
    1bd8:	88 27       	eor	r24, r24
    1bda:	69 01       	movw	r12, r18
    1bdc:	e1 2c       	mov	r14, r1
    1bde:	f1 2c       	mov	r15, r1
    1be0:	c8 2a       	or	r12, r24
    1be2:	d9 2a       	or	r13, r25
    1be4:	ea 2a       	or	r14, r26
    1be6:	fb 2a       	or	r15, r27
    1be8:	15 c0       	rjmp	.+42     	; 0x1c14 <__vector_7+0x86>
    1bea:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1bee:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1bf2:	8f ef       	ldi	r24, 0xFF	; 255
    1bf4:	c8 1a       	sub	r12, r24
    1bf6:	d8 0a       	sbc	r13, r24
    1bf8:	0d 2c       	mov	r0, r13
    1bfa:	00 0c       	add	r0, r0
    1bfc:	ee 08       	sbc	r14, r14
    1bfe:	ff 08       	sbc	r15, r15
    1c00:	d6 01       	movw	r26, r12
    1c02:	99 27       	eor	r25, r25
    1c04:	88 27       	eor	r24, r24
    1c06:	69 01       	movw	r12, r18
    1c08:	e1 2c       	mov	r14, r1
    1c0a:	f1 2c       	mov	r15, r1
    1c0c:	c8 2a       	or	r12, r24
    1c0e:	d9 2a       	or	r13, r25
    1c10:	ea 2a       	or	r14, r26
    1c12:	fb 2a       	or	r15, r27
    1c14:	e0 91 78 01 	lds	r30, 0x0178	; 0x800178 <timerQ>
    1c18:	f0 91 79 01 	lds	r31, 0x0179	; 0x800179 <timerQ+0x1>
    1c1c:	30 97       	sbiw	r30, 0x00	; 0
    1c1e:	09 f4       	brne	.+2      	; 0x1c22 <__vector_7+0x94>
    1c20:	42 c0       	rjmp	.+132    	; 0x1ca6 <__vector_7+0x118>
    1c22:	82 81       	ldd	r24, Z+2	; 0x02
    1c24:	93 81       	ldd	r25, Z+3	; 0x03
    1c26:	a4 81       	ldd	r26, Z+4	; 0x04
    1c28:	b5 81       	ldd	r27, Z+5	; 0x05
    1c2a:	8c 19       	sub	r24, r12
    1c2c:	9d 09       	sbc	r25, r13
    1c2e:	ae 09       	sbc	r26, r14
    1c30:	bf 09       	sbc	r27, r15
    1c32:	18 16       	cp	r1, r24
    1c34:	19 06       	cpc	r1, r25
    1c36:	1a 06       	cpc	r1, r26
    1c38:	1b 06       	cpc	r1, r27
    1c3a:	ec f1       	brlt	.+122    	; 0x1cb6 <__vector_7+0x128>
    1c3c:	88 e7       	ldi	r24, 0x78	; 120
    1c3e:	91 e0       	ldi	r25, 0x01	; 1
    1c40:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <dequeue>
    1c44:	6a e7       	ldi	r22, 0x7A	; 122
    1c46:	71 e0       	ldi	r23, 0x01	; 1
    1c48:	0e 94 c7 0c 	call	0x198e	; 0x198e <enqueueByDeadline>
    1c4c:	e0 91 78 01 	lds	r30, 0x0178	; 0x800178 <timerQ>
    1c50:	f0 91 79 01 	lds	r31, 0x0179	; 0x800179 <timerQ+0x1>
    1c54:	30 97       	sbiw	r30, 0x00	; 0
    1c56:	39 f1       	breq	.+78     	; 0x1ca6 <__vector_7+0x118>
    1c58:	82 81       	ldd	r24, Z+2	; 0x02
    1c5a:	93 81       	ldd	r25, Z+3	; 0x03
    1c5c:	a4 81       	ldd	r26, Z+4	; 0x04
    1c5e:	b5 81       	ldd	r27, Z+5	; 0x05
    1c60:	8c 19       	sub	r24, r12
    1c62:	9d 09       	sbc	r25, r13
    1c64:	ae 09       	sbc	r26, r14
    1c66:	bf 09       	sbc	r27, r15
    1c68:	18 16       	cp	r1, r24
    1c6a:	19 06       	cpc	r1, r25
    1c6c:	1a 06       	cpc	r1, r26
    1c6e:	1b 06       	cpc	r1, r27
    1c70:	2c f7       	brge	.-54     	; 0x1c3c <__vector_7+0xae>
    1c72:	21 c0       	rjmp	.+66     	; 0x1cb6 <__vector_7+0x128>
    1c74:	9c 01       	movw	r18, r24
    1c76:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c7a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c7e:	84 1b       	sub	r24, r20
    1c80:	95 0b       	sbc	r25, r21
    1c82:	01 97       	sbiw	r24, 0x01	; 1
    1c84:	31 f4       	brne	.+12     	; 0x1c92 <__vector_7+0x104>
    1c86:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c8a:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c8e:	2f 5f       	subi	r18, 0xFF	; 255
    1c90:	3f 4f       	sbci	r19, 0xFF	; 255
    1c92:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1c96:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1c9a:	ef e6       	ldi	r30, 0x6F	; 111
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	80 81       	ld	r24, Z
    1ca0:	82 60       	ori	r24, 0x02	; 2
    1ca2:	80 83       	st	Z, r24
    1ca4:	05 c0       	rjmp	.+10     	; 0x1cb0 <__vector_7+0x122>
    1ca6:	ef e6       	ldi	r30, 0x6F	; 111
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	80 81       	ld	r24, Z
    1cac:	8d 7f       	andi	r24, 0xFD	; 253
    1cae:	80 83       	st	Z, r24
    1cb0:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <schedule>
    1cb4:	0c c0       	rjmp	.+24     	; 0x1cce <__vector_7+0x140>
    1cb6:	82 81       	ldd	r24, Z+2	; 0x02
    1cb8:	93 81       	ldd	r25, Z+3	; 0x03
    1cba:	a4 81       	ldd	r26, Z+4	; 0x04
    1cbc:	b5 81       	ldd	r27, Z+5	; 0x05
    1cbe:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <overflows>
    1cc2:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <overflows+0x1>
    1cc6:	2a 17       	cp	r18, r26
    1cc8:	3b 07       	cpc	r19, r27
    1cca:	69 f7       	brne	.-38     	; 0x1ca6 <__vector_7+0x118>
    1ccc:	d3 cf       	rjmp	.-90     	; 0x1c74 <__vector_7+0xe6>
    1cce:	ff 91       	pop	r31
    1cd0:	ef 91       	pop	r30
    1cd2:	bf 91       	pop	r27
    1cd4:	af 91       	pop	r26
    1cd6:	9f 91       	pop	r25
    1cd8:	8f 91       	pop	r24
    1cda:	7f 91       	pop	r23
    1cdc:	6f 91       	pop	r22
    1cde:	5f 91       	pop	r21
    1ce0:	4f 91       	pop	r20
    1ce2:	3f 91       	pop	r19
    1ce4:	2f 91       	pop	r18
    1ce6:	ff 90       	pop	r15
    1ce8:	ef 90       	pop	r14
    1cea:	df 90       	pop	r13
    1cec:	cf 90       	pop	r12
    1cee:	0f 90       	pop	r0
    1cf0:	0f be       	out	0x3f, r0	; 63
    1cf2:	0f 90       	pop	r0
    1cf4:	1f 90       	pop	r1
    1cf6:	18 95       	reti

00001cf8 <async>:
    1cf8:	3f 92       	push	r3
    1cfa:	4f 92       	push	r4
    1cfc:	5f 92       	push	r5
    1cfe:	6f 92       	push	r6
    1d00:	7f 92       	push	r7
    1d02:	8f 92       	push	r8
    1d04:	9f 92       	push	r9
    1d06:	af 92       	push	r10
    1d08:	bf 92       	push	r11
    1d0a:	cf 92       	push	r12
    1d0c:	df 92       	push	r13
    1d0e:	ef 92       	push	r14
    1d10:	ff 92       	push	r15
    1d12:	0f 93       	push	r16
    1d14:	1f 93       	push	r17
    1d16:	cf 93       	push	r28
    1d18:	df 93       	push	r29
    1d1a:	2b 01       	movw	r4, r22
    1d1c:	3c 01       	movw	r6, r24
    1d1e:	49 01       	movw	r8, r18
    1d20:	5a 01       	movw	r10, r20
    1d22:	8f b7       	in	r24, 0x3f	; 63
    1d24:	80 78       	andi	r24, 0x80	; 128
    1d26:	38 2e       	mov	r3, r24
    1d28:	f8 94       	cli
    1d2a:	83 e4       	ldi	r24, 0x43	; 67
    1d2c:	91 e0       	ldi	r25, 0x01	; 1
    1d2e:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <dequeue>
    1d32:	ec 01       	movw	r28, r24
    1d34:	1b 87       	std	Y+11, r17	; 0x0b
    1d36:	0a 87       	std	Y+10, r16	; 0x0a
    1d38:	fd 86       	std	Y+13, r15	; 0x0d
    1d3a:	ec 86       	std	Y+12, r14	; 0x0c
    1d3c:	df 86       	std	Y+15, r13	; 0x0f
    1d3e:	ce 86       	std	Y+14, r12	; 0x0e
    1d40:	33 20       	and	r3, r3
    1d42:	61 f0       	breq	.+24     	; 0x1d5c <async+0x64>
    1d44:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <current>
    1d48:	f0 91 3e 01 	lds	r31, 0x013E	; 0x80013e <current+0x1>
    1d4c:	02 80       	ldd	r0, Z+2	; 0x02
    1d4e:	f3 81       	ldd	r31, Z+3	; 0x03
    1d50:	e0 2d       	mov	r30, r0
    1d52:	82 81       	ldd	r24, Z+2	; 0x02
    1d54:	93 81       	ldd	r25, Z+3	; 0x03
    1d56:	a4 81       	ldd	r26, Z+4	; 0x04
    1d58:	b5 81       	ldd	r27, Z+5	; 0x05
    1d5a:	08 c0       	rjmp	.+16     	; 0x1d6c <async+0x74>
    1d5c:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <timestamp>
    1d60:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <timestamp+0x1>
    1d64:	a0 91 76 01 	lds	r26, 0x0176	; 0x800176 <timestamp+0x2>
    1d68:	b0 91 77 01 	lds	r27, 0x0177	; 0x800177 <timestamp+0x3>
    1d6c:	48 0e       	add	r4, r24
    1d6e:	59 1e       	adc	r5, r25
    1d70:	6a 1e       	adc	r6, r26
    1d72:	7b 1e       	adc	r7, r27
    1d74:	4a 82       	std	Y+2, r4	; 0x02
    1d76:	5b 82       	std	Y+3, r5	; 0x03
    1d78:	6c 82       	std	Y+4, r6	; 0x04
    1d7a:	7d 82       	std	Y+5, r7	; 0x05
    1d7c:	18 14       	cp	r1, r8
    1d7e:	19 04       	cpc	r1, r9
    1d80:	1a 04       	cpc	r1, r10
    1d82:	1b 04       	cpc	r1, r11
    1d84:	44 f0       	brlt	.+16     	; 0x1d96 <async+0x9e>
    1d86:	0f 2e       	mov	r0, r31
    1d88:	88 24       	eor	r8, r8
    1d8a:	8a 94       	dec	r8
    1d8c:	98 2c       	mov	r9, r8
    1d8e:	a8 2c       	mov	r10, r8
    1d90:	ff e7       	ldi	r31, 0x7F	; 127
    1d92:	bf 2e       	mov	r11, r31
    1d94:	f0 2d       	mov	r31, r0
    1d96:	84 0c       	add	r8, r4
    1d98:	95 1c       	adc	r9, r5
    1d9a:	a6 1c       	adc	r10, r6
    1d9c:	b7 1c       	adc	r11, r7
    1d9e:	8e 82       	std	Y+6, r8	; 0x06
    1da0:	9f 82       	std	Y+7, r9	; 0x07
    1da2:	a8 86       	std	Y+8, r10	; 0x08
    1da4:	b9 86       	std	Y+9, r11	; 0x09
    1da6:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <overflows>
    1daa:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <overflows+0x1>
    1dae:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1db2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1db6:	b0 99       	sbic	0x16, 0	; 22
    1db8:	0e c0       	rjmp	.+28     	; 0x1dd6 <async+0xde>
    1dba:	09 2e       	mov	r0, r25
    1dbc:	00 0c       	add	r0, r0
    1dbe:	aa 0b       	sbc	r26, r26
    1dc0:	bb 0b       	sbc	r27, r27
    1dc2:	dc 01       	movw	r26, r24
    1dc4:	99 27       	eor	r25, r25
    1dc6:	88 27       	eor	r24, r24
    1dc8:	60 e0       	ldi	r22, 0x00	; 0
    1dca:	70 e0       	ldi	r23, 0x00	; 0
    1dcc:	84 2b       	or	r24, r20
    1dce:	95 2b       	or	r25, r21
    1dd0:	a6 2b       	or	r26, r22
    1dd2:	b7 2b       	or	r27, r23
    1dd4:	13 c0       	rjmp	.+38     	; 0x1dfc <async+0x104>
    1dd6:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1dda:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1dde:	01 96       	adiw	r24, 0x01	; 1
    1de0:	09 2e       	mov	r0, r25
    1de2:	00 0c       	add	r0, r0
    1de4:	aa 0b       	sbc	r26, r26
    1de6:	bb 0b       	sbc	r27, r27
    1de8:	dc 01       	movw	r26, r24
    1dea:	99 27       	eor	r25, r25
    1dec:	88 27       	eor	r24, r24
    1dee:	a9 01       	movw	r20, r18
    1df0:	60 e0       	ldi	r22, 0x00	; 0
    1df2:	70 e0       	ldi	r23, 0x00	; 0
    1df4:	84 2b       	or	r24, r20
    1df6:	95 2b       	or	r25, r21
    1df8:	a6 2b       	or	r26, r22
    1dfa:	b7 2b       	or	r27, r23
    1dfc:	48 1a       	sub	r4, r24
    1dfe:	59 0a       	sbc	r5, r25
    1e00:	6a 0a       	sbc	r6, r26
    1e02:	7b 0a       	sbc	r7, r27
    1e04:	14 14       	cp	r1, r4
    1e06:	15 04       	cpc	r1, r5
    1e08:	16 04       	cpc	r1, r6
    1e0a:	17 04       	cpc	r1, r7
    1e0c:	ac f5       	brge	.+106    	; 0x1e78 <async+0x180>
    1e0e:	68 e7       	ldi	r22, 0x78	; 120
    1e10:	71 e0       	ldi	r23, 0x01	; 1
    1e12:	ce 01       	movw	r24, r28
    1e14:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <enqueueByBaseline>
    1e18:	e0 91 78 01 	lds	r30, 0x0178	; 0x800178 <timerQ>
    1e1c:	f0 91 79 01 	lds	r31, 0x0179	; 0x800179 <timerQ+0x1>
    1e20:	30 97       	sbiw	r30, 0x00	; 0
    1e22:	21 f1       	breq	.+72     	; 0x1e6c <async+0x174>
    1e24:	82 81       	ldd	r24, Z+2	; 0x02
    1e26:	93 81       	ldd	r25, Z+3	; 0x03
    1e28:	a4 81       	ldd	r26, Z+4	; 0x04
    1e2a:	b5 81       	ldd	r27, Z+5	; 0x05
    1e2c:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <overflows>
    1e30:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <overflows+0x1>
    1e34:	2a 17       	cp	r18, r26
    1e36:	3b 07       	cpc	r19, r27
    1e38:	c9 f4       	brne	.+50     	; 0x1e6c <async+0x174>
    1e3a:	9c 01       	movw	r18, r24
    1e3c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e40:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e44:	84 1b       	sub	r24, r20
    1e46:	95 0b       	sbc	r25, r21
    1e48:	01 97       	sbiw	r24, 0x01	; 1
    1e4a:	31 f4       	brne	.+12     	; 0x1e58 <async+0x160>
    1e4c:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e50:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e54:	2f 5f       	subi	r18, 0xFF	; 255
    1e56:	3f 4f       	sbci	r19, 0xFF	; 255
    1e58:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1e5c:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1e60:	ef e6       	ldi	r30, 0x6F	; 111
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	80 81       	ld	r24, Z
    1e66:	82 60       	ori	r24, 0x02	; 2
    1e68:	80 83       	st	Z, r24
    1e6a:	41 c0       	rjmp	.+130    	; 0x1eee <async+0x1f6>
    1e6c:	ef e6       	ldi	r30, 0x6F	; 111
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 81       	ld	r24, Z
    1e72:	8d 7f       	andi	r24, 0xFD	; 253
    1e74:	80 83       	st	Z, r24
    1e76:	3b c0       	rjmp	.+118    	; 0x1eee <async+0x1f6>
    1e78:	6a e7       	ldi	r22, 0x7A	; 122
    1e7a:	71 e0       	ldi	r23, 0x01	; 1
    1e7c:	ce 01       	movw	r24, r28
    1e7e:	0e 94 c7 0c 	call	0x198e	; 0x198e <enqueueByDeadline>
    1e82:	33 20       	and	r3, r3
    1e84:	b9 f1       	breq	.+110    	; 0x1ef4 <async+0x1fc>
    1e86:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <threadPool>
    1e8a:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <threadPool+0x1>
    1e8e:	00 97       	sbiw	r24, 0x00	; 0
    1e90:	81 f1       	breq	.+96     	; 0x1ef2 <async+0x1fa>
    1e92:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <activeStack>
    1e96:	f0 91 40 01 	lds	r31, 0x0140	; 0x800140 <activeStack+0x1>
    1e9a:	20 91 7a 01 	lds	r18, 0x017A	; 0x80017a <msgQ>
    1e9e:	30 91 7b 01 	lds	r19, 0x017B	; 0x80017b <msgQ+0x1>
    1ea2:	02 81       	ldd	r16, Z+2	; 0x02
    1ea4:	13 81       	ldd	r17, Z+3	; 0x03
    1ea6:	d9 01       	movw	r26, r18
    1ea8:	16 96       	adiw	r26, 0x06	; 6
    1eaa:	4d 91       	ld	r20, X+
    1eac:	5d 91       	ld	r21, X+
    1eae:	6d 91       	ld	r22, X+
    1eb0:	7c 91       	ld	r23, X
    1eb2:	19 97       	sbiw	r26, 0x09	; 9
    1eb4:	d8 01       	movw	r26, r16
    1eb6:	16 96       	adiw	r26, 0x06	; 6
    1eb8:	0d 91       	ld	r16, X+
    1eba:	1d 91       	ld	r17, X+
    1ebc:	2d 91       	ld	r18, X+
    1ebe:	3c 91       	ld	r19, X
    1ec0:	19 97       	sbiw	r26, 0x09	; 9
    1ec2:	40 1b       	sub	r20, r16
    1ec4:	51 0b       	sbc	r21, r17
    1ec6:	62 0b       	sbc	r22, r18
    1ec8:	73 0b       	sbc	r23, r19
    1eca:	9a f4       	brpl	.+38     	; 0x1ef2 <async+0x1fa>
    1ecc:	dc 01       	movw	r26, r24
    1ece:	2d 91       	ld	r18, X+
    1ed0:	3c 91       	ld	r19, X
    1ed2:	11 97       	sbiw	r26, 0x01	; 1
    1ed4:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <threadPool+0x1>
    1ed8:	20 93 41 01 	sts	0x0141, r18	; 0x800141 <threadPool>
    1edc:	ed 93       	st	X+, r30
    1ede:	fc 93       	st	X, r31
    1ee0:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <activeStack+0x1>
    1ee4:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <activeStack>
    1ee8:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <dispatch>
    1eec:	02 c0       	rjmp	.+4      	; 0x1ef2 <async+0x1fa>
    1eee:	33 20       	and	r3, r3
    1ef0:	09 f0       	breq	.+2      	; 0x1ef4 <async+0x1fc>
    1ef2:	78 94       	sei
    1ef4:	ce 01       	movw	r24, r28
    1ef6:	df 91       	pop	r29
    1ef8:	cf 91       	pop	r28
    1efa:	1f 91       	pop	r17
    1efc:	0f 91       	pop	r16
    1efe:	ff 90       	pop	r15
    1f00:	ef 90       	pop	r14
    1f02:	df 90       	pop	r13
    1f04:	cf 90       	pop	r12
    1f06:	bf 90       	pop	r11
    1f08:	af 90       	pop	r10
    1f0a:	9f 90       	pop	r9
    1f0c:	8f 90       	pop	r8
    1f0e:	7f 90       	pop	r7
    1f10:	6f 90       	pop	r6
    1f12:	5f 90       	pop	r5
    1f14:	4f 90       	pop	r4
    1f16:	3f 90       	pop	r3
    1f18:	08 95       	ret

00001f1a <sync>:
    1f1a:	cf 92       	push	r12
    1f1c:	df 92       	push	r13
    1f1e:	ef 92       	push	r14
    1f20:	ff 92       	push	r15
    1f22:	0f 93       	push	r16
    1f24:	1f 93       	push	r17
    1f26:	cf 93       	push	r28
    1f28:	df 93       	push	r29
    1f2a:	ec 01       	movw	r28, r24
    1f2c:	7b 01       	movw	r14, r22
    1f2e:	6a 01       	movw	r12, r20
    1f30:	1f b7       	in	r17, 0x3f	; 63
    1f32:	10 78       	andi	r17, 0x80	; 128
    1f34:	f8 94       	cli
    1f36:	a8 81       	ld	r26, Y
    1f38:	b9 81       	ldd	r27, Y+1	; 0x01
    1f3a:	10 97       	sbiw	r26, 0x00	; 0
    1f3c:	61 f1       	breq	.+88     	; 0x1f96 <sync+0x7c>
    1f3e:	14 96       	adiw	r26, 0x04	; 4
    1f40:	ed 91       	ld	r30, X+
    1f42:	fc 91       	ld	r31, X
    1f44:	15 97       	sbiw	r26, 0x05	; 5
    1f46:	30 97       	sbiw	r30, 0x00	; 0
    1f48:	41 f0       	breq	.+16     	; 0x1f5a <sync+0x40>
    1f4a:	a0 81       	ld	r26, Z
    1f4c:	b1 81       	ldd	r27, Z+1	; 0x01
    1f4e:	14 96       	adiw	r26, 0x04	; 4
    1f50:	ed 91       	ld	r30, X+
    1f52:	fc 91       	ld	r31, X
    1f54:	15 97       	sbiw	r26, 0x05	; 5
    1f56:	30 97       	sbiw	r30, 0x00	; 0
    1f58:	c1 f7       	brne	.-16     	; 0x1f4a <sync+0x30>
    1f5a:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <current>
    1f5e:	30 91 3e 01 	lds	r19, 0x013E	; 0x80013e <current+0x1>
    1f62:	2a 17       	cp	r18, r26
    1f64:	3b 07       	cpc	r19, r27
    1f66:	21 f0       	breq	.+8      	; 0x1f70 <sync+0x56>
    1f68:	11 23       	and	r17, r17
    1f6a:	09 f4       	brne	.+2      	; 0x1f6e <sync+0x54>
    1f6c:	3d c0       	rjmp	.+122    	; 0x1fe8 <sync+0xce>
    1f6e:	07 c0       	rjmp	.+14     	; 0x1f7e <sync+0x64>
    1f70:	11 23       	and	r17, r17
    1f72:	09 f4       	brne	.+2      	; 0x1f76 <sync+0x5c>
    1f74:	3c c0       	rjmp	.+120    	; 0x1fee <sync+0xd4>
    1f76:	78 94       	sei
    1f78:	8f ef       	ldi	r24, 0xFF	; 255
    1f7a:	9f ef       	ldi	r25, 0xFF	; 255
    1f7c:	52 c0       	rjmp	.+164    	; 0x2022 <sync+0x108>
    1f7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f80:	9b 81       	ldd	r25, Y+3	; 0x03
    1f82:	00 97       	sbiw	r24, 0x00	; 0
    1f84:	d1 f1       	breq	.+116    	; 0x1ffa <sync+0xe0>
    1f86:	fc 01       	movw	r30, r24
    1f88:	15 82       	std	Z+5, r1	; 0x05
    1f8a:	14 82       	std	Z+4, r1	; 0x04
    1f8c:	36 c0       	rjmp	.+108    	; 0x1ffa <sync+0xe0>
    1f8e:	78 94       	sei
    1f90:	80 e0       	ldi	r24, 0x00	; 0
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	46 c0       	rjmp	.+140    	; 0x2022 <sync+0x108>
    1f96:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <current>
    1f9a:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <current+0x1>
    1f9e:	99 83       	std	Y+1, r25	; 0x01
    1fa0:	88 83       	st	Y, r24
    1fa2:	11 23       	and	r17, r17
    1fa4:	29 f0       	breq	.+10     	; 0x1fb0 <sync+0x96>
    1fa6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa8:	9b 81       	ldd	r25, Y+3	; 0x03
    1faa:	01 97       	sbiw	r24, 0x01	; 1
    1fac:	09 f0       	breq	.+2      	; 0x1fb0 <sync+0x96>
    1fae:	78 94       	sei
    1fb0:	b6 01       	movw	r22, r12
    1fb2:	ce 01       	movw	r24, r28
    1fb4:	f7 01       	movw	r30, r14
    1fb6:	09 95       	icall
    1fb8:	f8 2e       	mov	r15, r24
    1fba:	09 2f       	mov	r16, r25
    1fbc:	8f b7       	in	r24, 0x3f	; 63
    1fbe:	f8 94       	cli
    1fc0:	19 82       	std	Y+1, r1	; 0x01
    1fc2:	18 82       	st	Y, r1
    1fc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc6:	9b 81       	ldd	r25, Y+3	; 0x03
    1fc8:	82 30       	cpi	r24, 0x02	; 2
    1fca:	91 05       	cpc	r25, r1
    1fcc:	38 f0       	brcs	.+14     	; 0x1fdc <sync+0xc2>
    1fce:	1b 82       	std	Y+3, r1	; 0x03
    1fd0:	1a 82       	std	Y+2, r1	; 0x02
    1fd2:	fc 01       	movw	r30, r24
    1fd4:	15 82       	std	Z+5, r1	; 0x05
    1fd6:	14 82       	std	Z+4, r1	; 0x04
    1fd8:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <dispatch>
    1fdc:	11 23       	and	r17, r17
    1fde:	51 f0       	breq	.+20     	; 0x1ff4 <sync+0xda>
    1fe0:	78 94       	sei
    1fe2:	8f 2d       	mov	r24, r15
    1fe4:	90 2f       	mov	r25, r16
    1fe6:	1d c0       	rjmp	.+58     	; 0x2022 <sync+0x108>
    1fe8:	8f ef       	ldi	r24, 0xFF	; 255
    1fea:	9f ef       	ldi	r25, 0xFF	; 255
    1fec:	1a c0       	rjmp	.+52     	; 0x2022 <sync+0x108>
    1fee:	8f ef       	ldi	r24, 0xFF	; 255
    1ff0:	9f ef       	ldi	r25, 0xFF	; 255
    1ff2:	17 c0       	rjmp	.+46     	; 0x2022 <sync+0x108>
    1ff4:	8f 2d       	mov	r24, r15
    1ff6:	90 2f       	mov	r25, r16
    1ff8:	14 c0       	rjmp	.+40     	; 0x2022 <sync+0x108>
    1ffa:	3b 83       	std	Y+3, r19	; 0x03
    1ffc:	2a 83       	std	Y+2, r18	; 0x02
    1ffe:	f9 01       	movw	r30, r18
    2000:	d5 83       	std	Z+5, r29	; 0x05
    2002:	c4 83       	std	Z+4, r28	; 0x04
    2004:	cd 01       	movw	r24, r26
    2006:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <dispatch>
    200a:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <current>
    200e:	f0 91 3e 01 	lds	r31, 0x013E	; 0x80013e <current+0x1>
    2012:	82 81       	ldd	r24, Z+2	; 0x02
    2014:	93 81       	ldd	r25, Z+3	; 0x03
    2016:	89 2b       	or	r24, r25
    2018:	09 f4       	brne	.+2      	; 0x201c <sync+0x102>
    201a:	b9 cf       	rjmp	.-142    	; 0x1f8e <sync+0x74>
    201c:	f9 83       	std	Y+1, r31	; 0x01
    201e:	e8 83       	st	Y, r30
    2020:	c2 cf       	rjmp	.-124    	; 0x1fa6 <sync+0x8c>
    2022:	df 91       	pop	r29
    2024:	cf 91       	pop	r28
    2026:	1f 91       	pop	r17
    2028:	0f 91       	pop	r16
    202a:	ff 90       	pop	r15
    202c:	ef 90       	pop	r14
    202e:	df 90       	pop	r13
    2030:	cf 90       	pop	r12
    2032:	08 95       	ret

00002034 <run>:
    2034:	00 91 3d 01 	lds	r16, 0x013D	; 0x80013d <current>
    2038:	10 91 3e 01 	lds	r17, 0x013E	; 0x80013e <current+0x1>
    203c:	8a e7       	ldi	r24, 0x7A	; 122
    203e:	91 e0       	ldi	r25, 0x01	; 1
    2040:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <dequeue>
    2044:	ec 01       	movw	r28, r24
    2046:	d8 01       	movw	r26, r16
    2048:	13 96       	adiw	r26, 0x03	; 3
    204a:	9c 93       	st	X, r25
    204c:	8e 93       	st	-X, r24
    204e:	12 97       	sbiw	r26, 0x02	; 2
    2050:	78 94       	sei
    2052:	4e 85       	ldd	r20, Y+14	; 0x0e
    2054:	5f 85       	ldd	r21, Y+15	; 0x0f
    2056:	6c 85       	ldd	r22, Y+12	; 0x0c
    2058:	7d 85       	ldd	r23, Y+13	; 0x0d
    205a:	8a 85       	ldd	r24, Y+10	; 0x0a
    205c:	9b 85       	ldd	r25, Y+11	; 0x0b
    205e:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <sync>
    2062:	8f b7       	in	r24, 0x3f	; 63
    2064:	f8 94       	cli
    2066:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <msgPool>
    206a:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <msgPool+0x1>
    206e:	99 83       	std	Y+1, r25	; 0x01
    2070:	88 83       	st	Y, r24
    2072:	d0 93 44 01 	sts	0x0144, r29	; 0x800144 <msgPool+0x1>
    2076:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <msgPool>
    207a:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <activeStack>
    207e:	f0 91 40 01 	lds	r31, 0x0140	; 0x800140 <activeStack+0x1>
    2082:	00 81       	ld	r16, Z
    2084:	11 81       	ldd	r17, Z+1	; 0x01
    2086:	e8 01       	movw	r28, r16
    2088:	2a 81       	ldd	r18, Y+2	; 0x02
    208a:	3b 81       	ldd	r19, Y+3	; 0x03
    208c:	a0 91 7a 01 	lds	r26, 0x017A	; 0x80017a <msgQ>
    2090:	b0 91 7b 01 	lds	r27, 0x017B	; 0x80017b <msgQ+0x1>
    2094:	10 97       	sbiw	r26, 0x00	; 0
    2096:	c1 f0       	breq	.+48     	; 0x20c8 <run+0x94>
    2098:	21 15       	cp	r18, r1
    209a:	31 05       	cpc	r19, r1
    209c:	59 f2       	breq	.-106    	; 0x2034 <run>
    209e:	16 96       	adiw	r26, 0x06	; 6
    20a0:	8d 91       	ld	r24, X+
    20a2:	9d 91       	ld	r25, X+
    20a4:	0d 90       	ld	r0, X+
    20a6:	bc 91       	ld	r27, X
    20a8:	a0 2d       	mov	r26, r0
    20aa:	e9 01       	movw	r28, r18
    20ac:	4e 81       	ldd	r20, Y+6	; 0x06
    20ae:	5f 81       	ldd	r21, Y+7	; 0x07
    20b0:	68 85       	ldd	r22, Y+8	; 0x08
    20b2:	79 85       	ldd	r23, Y+9	; 0x09
    20b4:	84 1b       	sub	r24, r20
    20b6:	95 0b       	sbc	r25, r21
    20b8:	a6 0b       	sbc	r26, r22
    20ba:	b7 0b       	sbc	r27, r23
    20bc:	18 16       	cp	r1, r24
    20be:	19 06       	cpc	r1, r25
    20c0:	1a 06       	cpc	r1, r26
    20c2:	1b 06       	cpc	r1, r27
    20c4:	0c f0       	brlt	.+2      	; 0x20c8 <run+0x94>
    20c6:	b6 cf       	rjmp	.-148    	; 0x2034 <run>
    20c8:	10 93 40 01 	sts	0x0140, r17	; 0x800140 <activeStack+0x1>
    20cc:	00 93 3f 01 	sts	0x013F, r16	; 0x80013f <activeStack>
    20d0:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <threadPool>
    20d4:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <threadPool+0x1>
    20d8:	91 83       	std	Z+1, r25	; 0x01
    20da:	80 83       	st	Z, r24
    20dc:	f0 93 42 01 	sts	0x0142, r31	; 0x800142 <threadPool+0x1>
    20e0:	e0 93 41 01 	sts	0x0141, r30	; 0x800141 <threadPool>
    20e4:	a0 91 3f 01 	lds	r26, 0x013F	; 0x80013f <activeStack>
    20e8:	b0 91 40 01 	lds	r27, 0x0140	; 0x800140 <activeStack+0x1>
    20ec:	14 96       	adiw	r26, 0x04	; 4
    20ee:	ed 91       	ld	r30, X+
    20f0:	fc 91       	ld	r31, X
    20f2:	15 97       	sbiw	r26, 0x05	; 5
    20f4:	30 97       	sbiw	r30, 0x00	; 0
    20f6:	41 f0       	breq	.+16     	; 0x2108 <run+0xd4>
    20f8:	a0 81       	ld	r26, Z
    20fa:	b1 81       	ldd	r27, Z+1	; 0x01
    20fc:	14 96       	adiw	r26, 0x04	; 4
    20fe:	ed 91       	ld	r30, X+
    2100:	fc 91       	ld	r31, X
    2102:	15 97       	sbiw	r26, 0x05	; 5
    2104:	30 97       	sbiw	r30, 0x00	; 0
    2106:	c1 f7       	brne	.-16     	; 0x20f8 <run+0xc4>
    2108:	cd 01       	movw	r24, r26
    210a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <dispatch>
    210e:	92 cf       	rjmp	.-220    	; 0x2034 <run>

00002110 <ABORT>:
    2110:	1f 93       	push	r17
    2112:	cf 93       	push	r28
    2114:	df 93       	push	r29
    2116:	ec 01       	movw	r28, r24
    2118:	1f b7       	in	r17, 0x3f	; 63
    211a:	10 78       	andi	r17, 0x80	; 128
    211c:	f8 94       	cli
    211e:	68 e7       	ldi	r22, 0x78	; 120
    2120:	71 e0       	ldi	r23, 0x01	; 1
    2122:	0e 94 3d 04 	call	0x87a	; 0x87a <remove>
    2126:	89 2b       	or	r24, r25
    2128:	39 f4       	brne	.+14     	; 0x2138 <ABORT+0x28>
    212a:	6a e7       	ldi	r22, 0x7A	; 122
    212c:	71 e0       	ldi	r23, 0x01	; 1
    212e:	ce 01       	movw	r24, r28
    2130:	0e 94 3d 04 	call	0x87a	; 0x87a <remove>
    2134:	89 2b       	or	r24, r25
    2136:	59 f0       	breq	.+22     	; 0x214e <ABORT+0x3e>
    2138:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <msgPool>
    213c:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <msgPool+0x1>
    2140:	99 83       	std	Y+1, r25	; 0x01
    2142:	88 83       	st	Y, r24
    2144:	d0 93 44 01 	sts	0x0144, r29	; 0x800144 <msgPool+0x1>
    2148:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <msgPool>
    214c:	2b c0       	rjmp	.+86     	; 0x21a4 <ABORT+0x94>
    214e:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <activeStack>
    2152:	f0 91 40 01 	lds	r31, 0x0140	; 0x800140 <activeStack+0x1>
    2156:	30 97       	sbiw	r30, 0x00	; 0
    2158:	29 f1       	breq	.+74     	; 0x21a4 <ABORT+0x94>
    215a:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <current>
    215e:	30 91 3e 01 	lds	r19, 0x013E	; 0x80013e <current+0x1>
    2162:	2e 17       	cp	r18, r30
    2164:	3f 07       	cpc	r19, r31
    2166:	c9 f0       	breq	.+50     	; 0x219a <ABORT+0x8a>
    2168:	82 81       	ldd	r24, Z+2	; 0x02
    216a:	93 81       	ldd	r25, Z+3	; 0x03
    216c:	c8 17       	cp	r28, r24
    216e:	d9 07       	cpc	r29, r25
    2170:	a1 f4       	brne	.+40     	; 0x219a <ABORT+0x8a>
    2172:	44 81       	ldd	r20, Z+4	; 0x04
    2174:	55 81       	ldd	r21, Z+5	; 0x05
    2176:	8a 85       	ldd	r24, Y+10	; 0x0a
    2178:	9b 85       	ldd	r25, Y+11	; 0x0b
    217a:	48 17       	cp	r20, r24
    217c:	59 07       	cpc	r21, r25
    217e:	69 f4       	brne	.+26     	; 0x219a <ABORT+0x8a>
    2180:	13 82       	std	Z+3, r1	; 0x03
    2182:	12 82       	std	Z+2, r1	; 0x02
    2184:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <msgPool>
    2188:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <msgPool+0x1>
    218c:	99 83       	std	Y+1, r25	; 0x01
    218e:	88 83       	st	Y, r24
    2190:	d0 93 44 01 	sts	0x0144, r29	; 0x800144 <msgPool+0x1>
    2194:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <msgPool>
    2198:	05 c0       	rjmp	.+10     	; 0x21a4 <ABORT+0x94>
    219a:	01 90       	ld	r0, Z+
    219c:	f0 81       	ld	r31, Z
    219e:	e0 2d       	mov	r30, r0
    21a0:	30 97       	sbiw	r30, 0x00	; 0
    21a2:	f9 f6       	brne	.-66     	; 0x2162 <ABORT+0x52>
    21a4:	11 23       	and	r17, r17
    21a6:	09 f0       	breq	.+2      	; 0x21aa <ABORT+0x9a>
    21a8:	78 94       	sei
    21aa:	df 91       	pop	r29
    21ac:	cf 91       	pop	r28
    21ae:	1f 91       	pop	r17
    21b0:	08 95       	ret

000021b2 <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    21b2:	42 31       	cpi	r20, 0x12	; 18
    21b4:	b8 f4       	brcc	.+46     	; 0x21e4 <install+0x32>
        char status;
        DISABLE(status);
    21b6:	2f b7       	in	r18, 0x3f	; 63
    21b8:	f8 94       	cli
        otable[i] = obj;
    21ba:	50 e0       	ldi	r21, 0x00	; 0
    21bc:	44 0f       	add	r20, r20
    21be:	55 1f       	adc	r21, r21
    21c0:	fa 01       	movw	r30, r20
    21c2:	e4 58       	subi	r30, 0x84	; 132
    21c4:	fe 4f       	sbci	r31, 0xFE	; 254
    21c6:	91 83       	std	Z+1, r25	; 0x01
    21c8:	80 83       	st	Z, r24
        mtable[i] = m;
    21ca:	fa 01       	movw	r30, r20
    21cc:	ec 5e       	subi	r30, 0xEC	; 236
    21ce:	fd 4f       	sbci	r31, 0xFD	; 253
    21d0:	71 83       	std	Z+1, r23	; 0x01
    21d2:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    21d4:	41 e0       	ldi	r20, 0x01	; 1
    21d6:	50 e0       	ldi	r21, 0x00	; 0
    21d8:	fc 01       	movw	r30, r24
    21da:	53 83       	std	Z+3, r21	; 0x03
    21dc:	42 83       	std	Z+2, r20	; 0x02
        ENABLE(status);
    21de:	22 23       	and	r18, r18
    21e0:	0c f4       	brge	.+2      	; 0x21e4 <install+0x32>
    21e2:	78 94       	sei
    21e4:	08 95       	ret

000021e6 <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    21e6:	8c 01       	movw	r16, r24
    21e8:	7b 01       	movw	r14, r22
    21ea:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    21ec:	8f b7       	in	r24, 0x3f	; 63
    21ee:	f8 94       	cli
    initialize();
    21f0:	0e 94 69 04 	call	0x8d2	; 0x8d2 <initialize>
    ENABLE(1);
    21f4:	78 94       	sei
    if (m != NULL)
    21f6:	e1 14       	cp	r14, r1
    21f8:	f1 04       	cpc	r15, r1
    21fa:	41 f0       	breq	.+16     	; 0x220c <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	a9 01       	movw	r20, r18
    2202:	60 e0       	ldi	r22, 0x00	; 0
    2204:	70 e0       	ldi	r23, 0x00	; 0
    2206:	cb 01       	movw	r24, r22
    2208:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <async>
    DISABLE(status);
    220c:	8f b7       	in	r24, 0x3f	; 63
    220e:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    2210:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <schedule>
    ENABLE(1);
    2214:	78 94       	sei
    while (1) {
        SLEEP();
    2216:	81 e0       	ldi	r24, 0x01	; 1
    2218:	83 bf       	out	0x33, r24	; 51
    221a:	88 95       	sleep
    221c:	fd cf       	rjmp	.-6      	; 0x2218 <tinytimber+0x32>

0000221e <setLamp>:

#include "TrafficLight.h"


void setLamp (TrafficLight *self, int newActive) {
    221e:	0f 93       	push	r16
    2220:	1f 93       	push	r17
    2222:	cf 93       	push	r28
    2224:	df 93       	push	r29
    2226:	ec 01       	movw	r28, r24
    2228:	8b 01       	movw	r16, r22
	SYNC(self->lightGui, switchActive, newActive);
    222a:	ab 01       	movw	r20, r22
    222c:	6b ed       	ldi	r22, 0xDB	; 219
    222e:	70 e0       	ldi	r23, 0x00	; 0
    2230:	8c 81       	ldd	r24, Y+4	; 0x04
    2232:	9d 81       	ldd	r25, Y+5	; 0x05
    2234:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <sync>
    self->act = newActive;
    2238:	1f 83       	std	Y+7, r17	; 0x07
    223a:	0e 83       	std	Y+6, r16	; 0x06
    switch (self->dir) {
    223c:	88 85       	ldd	r24, Y+8	; 0x08
    223e:	99 85       	ldd	r25, Y+9	; 0x09
    2240:	8f 3f       	cpi	r24, 0xFF	; 255
    2242:	2f ef       	ldi	r18, 0xFF	; 255
    2244:	92 07       	cpc	r25, r18
    2246:	51 f0       	breq	.+20     	; 0x225c <setLamp+0x3e>
    2248:	01 97       	sbiw	r24, 0x01	; 1
    224a:	79 f4       	brne	.+30     	; 0x226a <setLamp+0x4c>
        case 1:
            SYNC(self->wrt, updateNorth, newActive);
    224c:	a8 01       	movw	r20, r16
    224e:	6f e9       	ldi	r22, 0x9F	; 159
    2250:	71 e1       	ldi	r23, 0x11	; 17
    2252:	8a 85       	ldd	r24, Y+10	; 0x0a
    2254:	9b 85       	ldd	r25, Y+11	; 0x0b
    2256:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <sync>
			break;
    225a:	07 c0       	rjmp	.+14     	; 0x226a <setLamp+0x4c>
		case -1:
			SYNC(self->wrt, updateSouth, newActive);
    225c:	a8 01       	movw	r20, r16
    225e:	65 ea       	ldi	r22, 0xA5	; 165
    2260:	71 e1       	ldi	r23, 0x11	; 17
    2262:	8a 85       	ldd	r24, Y+10	; 0x0a
    2264:	9b 85       	ldd	r25, Y+11	; 0x0b
    2266:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <sync>
			break;
	}
}
    226a:	df 91       	pop	r29
    226c:	cf 91       	pop	r28
    226e:	1f 91       	pop	r17
    2270:	0f 91       	pop	r16
    2272:	08 95       	ret

00002274 <getLamp>:

int getLamp(TrafficLight *self) {
	return self->act;
    2274:	fc 01       	movw	r30, r24
    2276:	86 81       	ldd	r24, Z+6	; 0x06
    2278:	97 81       	ldd	r25, Z+7	; 0x07
    227a:	08 95       	ret

0000227c <initUtil>:
#include "Utility.h"

void initUtil (Utility *self, unsigned int ubrr){
    CLKPR = 0x80;
    227c:	e1 e6       	ldi	r30, 0x61	; 97
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	80 e8       	ldi	r24, 0x80	; 128
    2282:	80 83       	st	Z, r24
	CLKPR = 0x00;
    2284:	10 82       	st	Z, r1

	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
    2286:	8f e0       	ldi	r24, 0x0F	; 15
    2288:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
	LCDCRB = (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM0) | (1 << LCDPM1) | (1 << LCDPM2) | (1 << LCDCS);
    228c:	87 eb       	ldi	r24, 0xB7	; 183
    228e:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
    2292:	87 e0       	ldi	r24, 0x07	; 7
    2294:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
    2298:	90 ec       	ldi	r25, 0xC0	; 192
    229a:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>

    PORTB |= (1<<PB7)|(1<<PB6)|(1<<PB4);
    229e:	85 b1       	in	r24, 0x05	; 5
    22a0:	80 6d       	ori	r24, 0xD0	; 208
    22a2:	85 b9       	out	0x05, r24	; 5
    PORTE |= (1<<PE2)|(1<<PE3);
    22a4:	8e b1       	in	r24, 0x0e	; 14
    22a6:	8c 60       	ori	r24, 0x0C	; 12
    22a8:	8e b9       	out	0x0e, r24	; 14
	DDRB   = (1<<DDB5)|(1<<DDB3)|(1<<DDB2)|(1<<DDB1)|(1<<DDB0);
    22aa:	8f e2       	ldi	r24, 0x2F	; 47
    22ac:	84 b9       	out	0x04, r24	; 4
	DDRE   = (1<<DDE6)|(1<<DDE4); 
    22ae:	80 e5       	ldi	r24, 0x50	; 80
    22b0:	8d b9       	out	0x0d, r24	; 13
   
	PCMSK0 = (1<<PCINT3)|(1<<PCINT2);
    22b2:	8c e0       	ldi	r24, 0x0C	; 12
    22b4:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7fc06b>
	PCMSK1 = (1<<PCINT15)|(1<<PCINT14)|(1<<PCINT12);
    22b8:	80 ed       	ldi	r24, 0xD0	; 208
    22ba:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7fc06c>
	EIMSK = (1 << PCIE1)|(1 << PCIE0);
    22be:	9d bb       	out	0x1d, r25	; 29

    /* Set Baud Rate*/
    UBRR0H = (unsigned char)(ubrr>>8);
    22c0:	70 93 c5 00 	sts	0x00C5, r23	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7fc0c5>
	UBRR0L = (unsigned char)ubrr;
    22c4:	60 93 c4 00 	sts	0x00C4, r22	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7fc0c4>
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
    22c8:	88 e9       	ldi	r24, 0x98	; 152
    22ca:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7fc0c1>
	
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (1<<UCSZ00)|(1<<UCSZ01);
    22ce:	86 e0       	ldi	r24, 0x06	; 6
    22d0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7fc0c2>
    22d4:	08 95       	ret

000022d6 <sendChar>:
#include "Writer.h"

void sendChar(Writer *self) {
    22d6:	dc 01       	movw	r26, r24
	while(!(UCSR0A & (1 << UDRE0)));
    22d8:	e0 ec       	ldi	r30, 0xC0	; 192
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	90 81       	ld	r25, Z
    22de:	95 ff       	sbrs	r25, 5
    22e0:	fd cf       	rjmp	.-6      	; 0x22dc <sendChar+0x6>
     uint8_t message;
	 if (self->nAct == 1 && self->sAct == 0){
    22e2:	16 96       	adiw	r26, 0x06	; 6
    22e4:	8d 91       	ld	r24, X+
    22e6:	9c 91       	ld	r25, X
    22e8:	17 97       	sbiw	r26, 0x07	; 7
    22ea:	81 30       	cpi	r24, 0x01	; 1
    22ec:	91 05       	cpc	r25, r1
    22ee:	41 f4       	brne	.+16     	; 0x2300 <sendChar+0x2a>
    22f0:	14 96       	adiw	r26, 0x04	; 4
    22f2:	8d 91       	ld	r24, X+
    22f4:	9c 91       	ld	r25, X
    22f6:	15 97       	sbiw	r26, 0x05	; 5
    22f8:	89 2b       	or	r24, r25
    22fa:	79 f0       	breq	.+30     	; 0x231a <sendChar+0x44>
	 } else if (self->nAct == 0 && self->sAct == 1) {
			message = 0b0110;
	 } else if(self->nAct == 0 && self->sAct == 0) {
			message = 0b1010;
	 } else {
			message = 0b0000;
    22fc:	80 e0       	ldi	r24, 0x00	; 0
    22fe:	14 c0       	rjmp	.+40     	; 0x2328 <sendChar+0x52>
void sendChar(Writer *self) {
	while(!(UCSR0A & (1 << UDRE0)));
     uint8_t message;
	 if (self->nAct == 1 && self->sAct == 0){
			message = 0b1001;
	 } else if (self->nAct == 0 && self->sAct == 1) {
    2300:	89 2b       	or	r24, r25
    2302:	69 f4       	brne	.+26     	; 0x231e <sendChar+0x48>
    2304:	14 96       	adiw	r26, 0x04	; 4
    2306:	8d 91       	ld	r24, X+
    2308:	9c 91       	ld	r25, X
    230a:	15 97       	sbiw	r26, 0x05	; 5
    230c:	81 30       	cpi	r24, 0x01	; 1
    230e:	91 05       	cpc	r25, r1
    2310:	41 f0       	breq	.+16     	; 0x2322 <sendChar+0x4c>
			message = 0b0110;
	 } else if(self->nAct == 0 && self->sAct == 0) {
    2312:	89 2b       	or	r24, r25
    2314:	41 f0       	breq	.+16     	; 0x2326 <sendChar+0x50>
			message = 0b1010;
	 } else {
			message = 0b0000;
    2316:	80 e0       	ldi	r24, 0x00	; 0
    2318:	07 c0       	rjmp	.+14     	; 0x2328 <sendChar+0x52>

void sendChar(Writer *self) {
	while(!(UCSR0A & (1 << UDRE0)));
     uint8_t message;
	 if (self->nAct == 1 && self->sAct == 0){
			message = 0b1001;
    231a:	89 e0       	ldi	r24, 0x09	; 9
    231c:	05 c0       	rjmp	.+10     	; 0x2328 <sendChar+0x52>
	 } else if (self->nAct == 0 && self->sAct == 1) {
			message = 0b0110;
	 } else if(self->nAct == 0 && self->sAct == 0) {
			message = 0b1010;
	 } else {
			message = 0b0000;
    231e:	80 e0       	ldi	r24, 0x00	; 0
    2320:	03 c0       	rjmp	.+6      	; 0x2328 <sendChar+0x52>
	while(!(UCSR0A & (1 << UDRE0)));
     uint8_t message;
	 if (self->nAct == 1 && self->sAct == 0){
			message = 0b1001;
	 } else if (self->nAct == 0 && self->sAct == 1) {
			message = 0b0110;
    2322:	86 e0       	ldi	r24, 0x06	; 6
    2324:	01 c0       	rjmp	.+2      	; 0x2328 <sendChar+0x52>
	 } else if(self->nAct == 0 && self->sAct == 0) {
			message = 0b1010;
    2326:	8a e0       	ldi	r24, 0x0A	; 10
	 } else {
			message = 0b0000;
		
	 }
	UDR0 = message;
    2328:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
    232c:	08 95       	ret

0000232e <getChar>:
}

void getChar(Writer *self) {
	while (!(UCSR0A & (1 << RXC0)));
    232e:	e0 ec       	ldi	r30, 0xC0	; 192
    2330:	f0 e0       	ldi	r31, 0x00	; 0
    2332:	80 81       	ld	r24, Z
    2334:	88 23       	and	r24, r24
    2336:	ec f7       	brge	.-6      	; 0x2332 <getChar+0x4>
	char RecievedData = UDR0; // Get data from simulator
    2338:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
    233c:	08 95       	ret

0000233e <updateNorth>:
		
	return RecievedData;
}

void updateNorth(Writer *self, int newAct) {
    self->nAct = newAct;
    233e:	fc 01       	movw	r30, r24
    2340:	77 83       	std	Z+7, r23	; 0x07
    2342:	66 83       	std	Z+6, r22	; 0x06
	sendChar(self);
    2344:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <sendChar>
    2348:	08 95       	ret

0000234a <updateSouth>:
}

void updateSouth(Writer *self, int newAct){
    self->sAct = newAct;
    234a:	fc 01       	movw	r30, r24
    234c:	75 83       	std	Z+5, r23	; 0x05
    234e:	64 83       	std	Z+4, r22	; 0x04
	sendChar(self);
    2350:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <sendChar>
    2354:	08 95       	ret

00002356 <setjmp>:
    2356:	dc 01       	movw	r26, r24
    2358:	2d 92       	st	X+, r2
    235a:	3d 92       	st	X+, r3
    235c:	4d 92       	st	X+, r4
    235e:	5d 92       	st	X+, r5
    2360:	6d 92       	st	X+, r6
    2362:	7d 92       	st	X+, r7
    2364:	8d 92       	st	X+, r8
    2366:	9d 92       	st	X+, r9
    2368:	ad 92       	st	X+, r10
    236a:	bd 92       	st	X+, r11
    236c:	cd 92       	st	X+, r12
    236e:	dd 92       	st	X+, r13
    2370:	ed 92       	st	X+, r14
    2372:	fd 92       	st	X+, r15
    2374:	0d 93       	st	X+, r16
    2376:	1d 93       	st	X+, r17
    2378:	cd 93       	st	X+, r28
    237a:	dd 93       	st	X+, r29
    237c:	ff 91       	pop	r31
    237e:	ef 91       	pop	r30
    2380:	8d b7       	in	r24, 0x3d	; 61
    2382:	8d 93       	st	X+, r24
    2384:	8e b7       	in	r24, 0x3e	; 62
    2386:	8d 93       	st	X+, r24
    2388:	8f b7       	in	r24, 0x3f	; 63
    238a:	8d 93       	st	X+, r24
    238c:	ed 93       	st	X+, r30
    238e:	fd 93       	st	X+, r31
    2390:	88 27       	eor	r24, r24
    2392:	99 27       	eor	r25, r25
    2394:	09 94       	ijmp

00002396 <longjmp>:
    2396:	dc 01       	movw	r26, r24
    2398:	cb 01       	movw	r24, r22
    239a:	81 30       	cpi	r24, 0x01	; 1
    239c:	91 05       	cpc	r25, r1
    239e:	81 1d       	adc	r24, r1
    23a0:	2d 90       	ld	r2, X+
    23a2:	3d 90       	ld	r3, X+
    23a4:	4d 90       	ld	r4, X+
    23a6:	5d 90       	ld	r5, X+
    23a8:	6d 90       	ld	r6, X+
    23aa:	7d 90       	ld	r7, X+
    23ac:	8d 90       	ld	r8, X+
    23ae:	9d 90       	ld	r9, X+
    23b0:	ad 90       	ld	r10, X+
    23b2:	bd 90       	ld	r11, X+
    23b4:	cd 90       	ld	r12, X+
    23b6:	dd 90       	ld	r13, X+
    23b8:	ed 90       	ld	r14, X+
    23ba:	fd 90       	ld	r15, X+
    23bc:	0d 91       	ld	r16, X+
    23be:	1d 91       	ld	r17, X+
    23c0:	cd 91       	ld	r28, X+
    23c2:	dd 91       	ld	r29, X+
    23c4:	ed 91       	ld	r30, X+
    23c6:	fd 91       	ld	r31, X+
    23c8:	0d 90       	ld	r0, X+
    23ca:	f8 94       	cli
    23cc:	fe bf       	out	0x3e, r31	; 62
    23ce:	0f be       	out	0x3f, r0	; 63
    23d0:	ed bf       	out	0x3d, r30	; 61
    23d2:	ed 91       	ld	r30, X+
    23d4:	fd 91       	ld	r31, X+
    23d6:	09 94       	ijmp

000023d8 <_exit>:
    23d8:	f8 94       	cli

000023da <__stop_program>:
    23da:	ff cf       	rjmp	.-2      	; 0x23da <__stop_program>
